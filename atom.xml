<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Symbol Crash</title>
  
  <subtitle>不学无术</subtitle>
  <link href="https://yngty.github.io/atom.xml" rel="self"/>
  
  <link href="https://yngty.github.io/"/>
  <updated>2024-07-18T02:24:46.938Z</updated>
  <id>https://yngty.github.io/</id>
  
  <author>
    <name>yngty</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Netfilter 框架浅析</title>
    <link href="https://yngty.github.io/2024/07/11/network/Netfilter-%E6%A1%86%E6%9E%B6%E6%B5%85%E6%9E%90/"/>
    <id>https://yngty.github.io/2024/07/11/network/Netfilter-%E6%A1%86%E6%9E%B6%E6%B5%85%E6%9E%90/</id>
    <published>2024-07-11T17:42:47.000Z</published>
    <updated>2024-07-18T02:24:46.938Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;Netfilter&lt;/code&gt;，在 &lt;code&gt;Linux&lt;/code&gt; 内核中的一个软件框架，用于管理网络数据包。不仅具有网络地址转换（&lt;code&gt;NAT&lt;/code&gt;）的功能，也具备数据包内容修改、以及数据包过滤等防火墙功能。利用运作于用户空间的应用软件，如 &lt;code&gt;iptables&lt;/code&gt; 、&lt;code&gt;nftables&lt;/code&gt; 、&lt;code&gt;ebtables&lt;/code&gt; 和 &lt;code&gt;arptables&lt;/code&gt; 等，来控制 &lt;code&gt;Netfilter&lt;/code&gt;，系统管理者可以管理通过Linux操作系统的各种网络数据包。&lt;code&gt;1990&lt;/code&gt; 年代，&lt;code&gt;Netfilter&lt;/code&gt; 在 &lt;code&gt;Linux 2.3.15&lt;/code&gt; 版时进入Linux内核，正式应用于 &lt;code&gt;Linux 2.4&lt;/code&gt; 版。&lt;/p&gt;</summary>
    
    
    
    <category term="Network" scheme="https://yngty.github.io/categories/Network/"/>
    
    
    <category term="Netfilter" scheme="https://yngty.github.io/tags/Netfilter/"/>
    
  </entry>
  
  <entry>
    <title>TCP-TFO快速打开</title>
    <link href="https://yngty.github.io/2024/03/21/network/TCP-TFO%E5%BF%AB%E9%80%9F%E6%89%93%E5%BC%80/"/>
    <id>https://yngty.github.io/2024/03/21/network/TCP-TFO%E5%BF%AB%E9%80%9F%E6%89%93%E5%BC%80/</id>
    <published>2024-03-21T11:25:45.000Z</published>
    <updated>2024-07-18T02:24:46.938Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;&lt;code&gt;TCP&lt;/code&gt; 快速打开（&lt;code&gt;TCP Fast Open&lt;/code&gt;，简称&lt;code&gt;TFO&lt;/code&gt;）是对计算机网络中传输控制协议（&lt;code&gt;TCP&lt;/code&gt;）连接的一种简化握手手续的拓展，用于提高两端点间连接的打开速度。&lt;/p&gt;
&lt;p&gt;它通过握手开始时的 &lt;code&gt;SYN&lt;/code&gt; 包中的 &lt;code&gt;TFO cookie&lt;/code&gt;（一个 &lt;code&gt;TCP&lt;/code&gt; 选项）来验证一个之前连接过的客户端。如果验证成功，它可以在三次握手最终的 &lt;code&gt;ACK&lt;/code&gt; 包收到之前就开始发送数据，这样便跳过了一个绕路的行为，更在传输开始时就降低了延迟。这个加密的 &lt;code&gt;Cookie&lt;/code&gt; 被存储在客户端，在一开始的连接时被设定好。然后每当客户端连接时，这个 &lt;code&gt;Cookie&lt;/code&gt; 被重复返回。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;最显著的优点是可以利用握手去除一个往返 RTT&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;开启-TFO&quot;&gt;&lt;a href=&quot;#开启-TFO&quot; class=&quot;headerlink&quot; title=&quot;开启 TFO&quot;&gt;&lt;/a&gt;开启 TFO&lt;/h1&gt;&lt;p&gt;&lt;code&gt;net.ipv4.tcp_fastopen&lt;/code&gt; 是 &lt;code&gt;Linux&lt;/code&gt; 内核中的一个配置参数，它用于控制 &lt;code&gt;TCP Fast Open&lt;/code&gt; 功能。&lt;br&gt;具体地，&lt;code&gt;net.ipv4.tcp_fastopen&lt;/code&gt; 的值可以是以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;：禁用 &lt;code&gt;TCP Fast Open&lt;/code&gt; 功能。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt;：在客户端启用 &lt;code&gt;TCP Fast Open&lt;/code&gt; 功能。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2&lt;/code&gt;：在服务器端启用 &lt;code&gt;TCP Fast Open&lt;/code&gt; 功能。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3&lt;/code&gt;：在客户端和服务器端都启用 &lt;code&gt;TCP Fast Open&lt;/code&gt; 功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过设置这个参数，可以根据实际需求选择是否启用和在哪一端启用 &lt;code&gt;TCP Fast Open&lt;/code&gt;，从而优化网络性能。&lt;/p&gt;</summary>
    
    
    
    <category term="Network" scheme="https://yngty.github.io/categories/Network/"/>
    
    
    <category term="tcp" scheme="https://yngty.github.io/tags/tcp/"/>
    
    <category term="tfo" scheme="https://yngty.github.io/tags/tfo/"/>
    
  </entry>
  
  <entry>
    <title>网络工具 telnet、 nc、 netstat、ss</title>
    <link href="https://yngty.github.io/2024/03/20/network/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%20telnet%E3%80%81-nc%E3%80%81-netstat/"/>
    <id>https://yngty.github.io/2024/03/20/network/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%20telnet%E3%80%81-nc%E3%80%81-netstat/</id>
    <published>2024-03-20T09:42:47.000Z</published>
    <updated>2024-07-18T02:24:46.942Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;telnet&quot;&gt;&lt;a href=&quot;#telnet&quot; class=&quot;headerlink&quot; title=&quot;telnet&quot;&gt;&lt;/a&gt;&lt;code&gt;telnet&lt;/code&gt;&lt;/h1&gt;&lt;h2 id=&quot;检查端口是否打开&quot;&gt;&lt;a href=&quot;#检查端口是否打开&quot; class=&quot;headerlink&quot; title=&quot;检查端口是否打开&quot;&gt;&lt;/a&gt;检查端口是否打开&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;telnet [domainname or ip] [port]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;telnet 220.181.57.216 80&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Network" scheme="https://yngty.github.io/categories/Network/"/>
    
    
    <category term="tools" scheme="https://yngty.github.io/tags/tools/"/>
    
    <category term="network" scheme="https://yngty.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>MTU与MSS的奥秘</title>
    <link href="https://yngty.github.io/2024/03/18/network/MTU%E4%B8%8EMSS%E7%9A%84%E5%A5%A5%E7%A7%98/"/>
    <id>https://yngty.github.io/2024/03/18/network/MTU%E4%B8%8EMSS%E7%9A%84%E5%A5%A5%E7%A7%98/</id>
    <published>2024-03-18T14:44:24.000Z</published>
    <updated>2024-07-18T02:24:46.938Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;最大传输单元（Maximum-Transmission-Unit-MTU）&quot;&gt;&lt;a href=&quot;#最大传输单元（Maximum-Transmission-Unit-MTU）&quot; class=&quot;headerlink&quot; title=&quot;最大传输单元（Maximum Transmission Unit, MTU）&quot;&gt;&lt;/a&gt;最大传输单元（Maximum Transmission Unit, MTU）&lt;/h1&gt;&lt;p&gt;数据链路层传输的帧大小是有限制的，不能把一个太大的包直接塞给链路层，这个限制被称为「最大传输单元（&lt;code&gt;Maximum Transmission Unit, MTU&lt;/code&gt;）」&lt;/p&gt;</summary>
    
    
    
    <category term="Network" scheme="https://yngty.github.io/categories/Network/"/>
    
    
    <category term="tcp" scheme="https://yngty.github.io/tags/tcp/"/>
    
    <category term="MTU" scheme="https://yngty.github.io/tags/MTU/"/>
    
    <category term="MSS" scheme="https://yngty.github.io/tags/MSS/"/>
    
  </entry>
  
  <entry>
    <title>QUIC 协议初探</title>
    <link href="https://yngty.github.io/2024/03/08/network/QUIC-%E5%8D%8F%E8%AE%AE%E5%88%9D%E6%8E%A2/"/>
    <id>https://yngty.github.io/2024/03/08/network/QUIC-%E5%8D%8F%E8%AE%AE%E5%88%9D%E6%8E%A2/</id>
    <published>2024-03-08T14:24:01.000Z</published>
    <updated>2024-07-18T02:24:46.938Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Package Type&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Long Header Packets&lt;ul&gt;
&lt;li&gt;Version Negotiation Packet&lt;/li&gt;
&lt;li&gt;Initial Packet&lt;/li&gt;
&lt;li&gt;0-RTT</summary>
        
      
    
    
    
    <category term="Network" scheme="https://yngty.github.io/categories/Network/"/>
    
    
    <category term="QUIC" scheme="https://yngty.github.io/tags/QUIC/"/>
    
  </entry>
  
  <entry>
    <title>SUSE Linux 系统记录</title>
    <link href="https://yngty.github.io/2024/03/07/linux/SUSE-Linux-%E7%B3%BB%E7%BB%9F%E8%AE%B0%E5%BD%95/"/>
    <id>https://yngty.github.io/2024/03/07/linux/SUSE-Linux-%E7%B3%BB%E7%BB%9F%E8%AE%B0%E5%BD%95/</id>
    <published>2024-03-07T11:18:01.000Z</published>
    <updated>2024-07-18T02:24:46.938Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;最近接触到 &lt;code&gt;SUSE Linux&lt;/code&gt; 操作系统，一些命令不一样，这里记录下:&lt;/p&gt;
&lt;h1 id=&quot;包管理器-zypper&quot;&gt;&lt;a href=&quot;#包管理器-zypper&quot; class=&quot;headerlink&quot; title=&quot;包管理器</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Qt QML 核心概念基础</title>
    <link href="https://yngty.github.io/2024/02/26/qt/Qt-QML-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E5%9F%BA%E7%A1%80/"/>
    <id>https://yngty.github.io/2024/02/26/qt/Qt-QML-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E5%9F%BA%E7%A1%80/</id>
    <published>2024-02-26T09:50:56.000Z</published>
    <updated>2024-07-18T02:24:46.942Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Qt-QML-简介&quot;&gt;&lt;a href=&quot;#Qt-QML-简介&quot; class=&quot;headerlink&quot; title=&quot;Qt QML 简介&quot;&gt;&lt;/a&gt;Qt QML 简介&lt;/h1&gt;&lt;h2 id=&quot;QML-是什么？&quot;&gt;&lt;a href=&quot;#QML-是什么？&quot; class=&quot;headerlink&quot; title=&quot;QML 是什么？&quot;&gt;&lt;/a&gt;QML 是什么？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;QML&lt;/code&gt; 是声明式编程语言&lt;/li&gt;
&lt;li&gt;&lt;code&gt;QML&lt;/code&gt; 模块 类型库&lt;/li&gt;
&lt;li&gt;内置了 &lt;code&gt;javascript&lt;/code&gt; 运行时环境, 提供逻辑处理： 界面逻辑，业务逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Qt-Quick-是什么？&quot;&gt;&lt;a href=&quot;#Qt-Quick-是什么？&quot; class=&quot;headerlink&quot; title=&quot;Qt Quick 是什么？&quot;&gt;&lt;/a&gt;Qt Quick 是什么？&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Qt Quick&lt;/code&gt; 是类型库，提供了可视化 &lt;code&gt;UI&lt;/code&gt; 组件，软件开发框架，用于构建用户界面&lt;/p&gt;</summary>
    
    
    
    <category term="Qt" scheme="https://yngty.github.io/categories/Qt/"/>
    
    
    <category term="QML" scheme="https://yngty.github.io/tags/QML/"/>
    
    <category term="Qt" scheme="https://yngty.github.io/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>C++ Class layout</title>
    <link href="https://yngty.github.io/2024/01/22/c++/C-Class-layout/"/>
    <id>https://yngty.github.io/2024/01/22/c++/C-Class-layout/</id>
    <published>2024-01-22T10:24:40.000Z</published>
    <updated>2024-07-18T02:24:46.938Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;C-Class&quot;&gt;&lt;a href=&quot;#C-Class&quot; class=&quot;headerlink&quot; title=&quot;C++ Class&quot;&gt;&lt;/a&gt;C++ Class&lt;/h1&gt;&lt;p&gt;在类定义中，只有非静态数据声明会增加类对象的大小&lt;/p&gt;
&lt;h1 id=&quot;Empty-Class&quot;&gt;&lt;a href=&quot;#Empty-Class&quot; class=&quot;headerlink&quot; title=&quot;Empty Class&quot;&gt;&lt;/a&gt;Empty Class&lt;/h1&gt;&lt;p&gt;一个空类在C++中没有非静态数据成员、没有虚函数，也没有虚基类。这样的类通常被称为“无状态”，因为它们不封装任何状态或数据。然而，即使一个空类没有显式的数据成员，它仍然需要占用一些内存空间。&lt;/p&gt;
&lt;p&gt;C++标准规定，不同类型的对象必须具有不同的地址。因此，一个空类对象必须在内存中具有唯一的地址。这确保了即使一个空类对象没有任何可见的数据成员或行为，它也必须占用至少一个字节的内存，以区分它与具有不同类型的其他对象。&lt;/p&gt;</summary>
    
    
    
    <category term="C/C++" scheme="https://yngty.github.io/categories/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>C++ aggregate</title>
    <link href="https://yngty.github.io/2024/01/08/c++/C-aggregates/"/>
    <id>https://yngty.github.io/2024/01/08/c++/C-aggregates/</id>
    <published>2024-01-08T13:55:00.000Z</published>
    <updated>2024-07-18T02:24:46.938Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;什么是聚合类型-aggregate&quot;&gt;&lt;a href=&quot;#什么是聚合类型-aggregate&quot; class=&quot;headerlink&quot; title=&quot;什么是聚合类型(aggregate)&quot;&gt;&lt;/a&gt;什么是聚合类型(aggregate)&lt;/h1&gt;&lt;h2 id=&quot;在-C-03-中的定义&quot;&gt;&lt;a href=&quot;#在-C-03-中的定义&quot; class=&quot;headerlink&quot; title=&quot;在 C++03 中的定义&quot;&gt;&lt;/a&gt;在 C++03 中的定义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;不能有用户声明的构造函数&lt;/li&gt;
&lt;li&gt;没有私有或受保护的非静态数据成员，可以拥有任意数量的私有和受保护的成员函数（但不能是构造函数）以及任意数量的私有或受保护的静态数据成员和静态成员函数&lt;/li&gt;
&lt;li&gt;可以具有用户声明或用户定义的复制赋值运算符和或析构函数&lt;/li&gt;
&lt;li&gt;没有基类&lt;/li&gt;
&lt;li&gt;没有虚函数&lt;/li&gt;
&lt;li&gt;数组是聚合，即使它是非聚合类类型的数组&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="C/C++" scheme="https://yngty.github.io/categories/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>macOS 完全磁盘访问权限</title>
    <link href="https://yngty.github.io/2024/01/05/macos/macOS-%E5%AE%8C%E5%85%A8%E7%A3%81%E7%9B%98%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/"/>
    <id>https://yngty.github.io/2024/01/05/macos/macOS-%E5%AE%8C%E5%85%A8%E7%A3%81%E7%9B%98%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/</id>
    <published>2024-01-05T11:12:37.000Z</published>
    <updated>2024-07-18T02:24:46.938Z</updated>
    
    
    
    
    <category term="macOS" scheme="https://yngty.github.io/categories/macOS/"/>
    
    
    <category term="macOS" scheme="https://yngty.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>macOS Ventura App 管理</title>
    <link href="https://yngty.github.io/2024/01/04/macos/macOS-Ventura-App-%E7%AE%A1%E7%90%86/"/>
    <id>https://yngty.github.io/2024/01/04/macos/macOS-Ventura-App-%E7%AE%A1%E7%90%86/</id>
    <published>2024-01-04T14:34:10.000Z</published>
    <updated>2024-07-18T02:24:46.938Z</updated>
    
    
    <summary type="html">&lt;p&gt;从 &lt;code&gt;macOS Monterey&lt;/code&gt; 开始，如果应用程序被未由相同开发团队签名且未由 &lt;code&gt;NSUpdateSecurityPolicy&lt;/code&gt; 允许的东西修改，&lt;code&gt;macOS&lt;/code&gt; 将阻止修改并通知用户应用程序希望管理其他应用程序。点击通知会将用户发送到系统设置，他们可以在那里允许应用程序更新和修改其他应用程序。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/appmanager.png&quot; alt=&quot;appmanager&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="macOS" scheme="https://yngty.github.io/categories/macOS/"/>
    
    
    <category term="macOS" scheme="https://yngty.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>深入了解 C++20 中的 consteval</title>
    <link href="https://yngty.github.io/2023/12/29/c++/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3C-20%E4%B8%AD%E7%9A%84consteval%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>https://yngty.github.io/2023/12/29/c++/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3C-20%E4%B8%AD%E7%9A%84consteval%E5%85%B3%E9%94%AE%E5%AD%97/</id>
    <published>2023-12-29T18:16:18.000Z</published>
    <updated>2024-07-18T02:24:46.938Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;用最简单的术语来说，一个只能应用于函数的 &lt;code&gt;consteval&lt;/code&gt; 关键字, 保证它产生一个编译时间常数。否则会导致编译错误。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cppreference&lt;/code&gt; 页面对 &lt;code&gt;consteval&lt;/code&gt; 说明符有如下描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;consteval&lt;/code&gt; 指定函数是立即函数，也就是说，对该函数的每次调用都必须产生一个编译时常量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;什么是立即函数？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不能是协程&lt;/li&gt;
&lt;li&gt;函数主体中不能有 &lt;code&gt;throw&lt;/code&gt; 语句&lt;/li&gt;
&lt;li&gt;不能有 &lt;code&gt;goto&lt;/code&gt; 语句或标签语句，除了 &lt;code&gt;case&lt;/code&gt; 和 &lt;code&gt;default&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;参数和返回类型必须是&lt;a href=&quot;https://en.cppreference.com/w/cpp/named_req/LiteralType&quot;&gt;LiteralType&lt;/a&gt;,简单地说，是一个可以在编译时计算的类型（比如所有可以在 &lt;code&gt;constexpr&lt;/code&gt; 上下文中使用的类型）&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="C/C++" scheme="https://yngty.github.io/categories/C-C/"/>
    
    
    <category term="C++20" scheme="https://yngty.github.io/tags/C-20/"/>
    
    <category term="const" scheme="https://yngty.github.io/tags/const/"/>
    
  </entry>
  
  <entry>
    <title>深入了解 C++20 中的 constinit</title>
    <link href="https://yngty.github.io/2023/12/29/c++/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3C++20%E4%B8%AD%E7%9A%84constinit%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>https://yngty.github.io/2023/12/29/c++/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3C++20%E4%B8%AD%E7%9A%84constinit%E5%85%B3%E9%94%AE%E5%AD%97/</id>
    <published>2023-12-29T17:41:16.000Z</published>
    <updated>2024-07-18T02:24:46.938Z</updated>
    
    
    <summary type="html">&lt;p&gt;在 &lt;code&gt;C++&lt;/code&gt; 中，存储变量的方式有几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;存储期（&lt;code&gt;Storage Duration&lt;/code&gt;）：&lt;br&gt;存储期是指变量在程序中存在的时间段。在 &lt;code&gt;C++&lt;/code&gt; 中，有三种主要的存储期：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动存储期（&lt;code&gt;Automatic Storage Duration&lt;/code&gt;）：变量在函数或代码块执行时创建，函数执行结束时销毁。&lt;/li&gt;
&lt;li&gt;动态存储期（&lt;code&gt;Dynamic Storage Duration&lt;/code&gt;）： 使用 &lt;code&gt;new&lt;/code&gt; 或 &lt;code&gt;malloc&lt;/code&gt; 分配的内存，直到使用 &lt;code&gt;delete&lt;/code&gt; 或 &lt;code&gt;free&lt;/code&gt; 手动释放为止。&lt;/li&gt;
&lt;li&gt;静态存储期（&lt;code&gt;Static Storage Duration&lt;/code&gt;）： 变量在程序启动时创建，在整个程序运行期间都存在，直到程序结束才销毁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;静态存储变量：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;静态存储变量是在程序启动时创建，一直存在于整个程序运行期间的变量。这类变量有两种主要形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全局变量（&lt;code&gt;Global Variables&lt;/code&gt;）： 在函数外部声明的变量，可以被程序中的所有函数访问。&lt;/li&gt;
&lt;li&gt;静态局部变量（&lt;code&gt;Static Local Variables&lt;/code&gt;）： 在函数内部使用 &lt;code&gt;static&lt;/code&gt; 关键字声明的变量，与自动存储期变量不同，它在函数调用之间保持其值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 &lt;code&gt;C++&lt;/code&gt; 中，我们经常使用静态存储期变量，包括全局变量和使用 &lt;code&gt;static&lt;/code&gt; 关键字声明的局部变量。然而，这些变量并不保证在程序执行前被初始化，除非它们被声明为 &lt;code&gt;const&lt;/code&gt; 常量。为了解决这一问题，&lt;code&gt;C++20&lt;/code&gt; 引入了 &lt;code&gt;constinit&lt;/code&gt; 关键字，它为我们提供了一种保证变量在程序启动时被初始化的方式，从而增强了可预测性和可靠性。&lt;/p&gt;
&lt;p&gt;尽管 &lt;code&gt;constinit&lt;/code&gt; 确保变量在程序启动时被初始化，但这并不意味着这些变量是不可修改的常量。相反，这个关键字允许变量在初始化后在运行时或编译时上下文中被修改。&lt;/p&gt;
&lt;p&gt;因此，&lt;code&gt;constinit&lt;/code&gt; 关键字为我们提供了一种在使用静态存储期变量时获得初始化保证的方法，同时允许在初始化后对其进行适当的修改。&lt;/p&gt;</summary>
    
    
    
    <category term="C/C++" scheme="https://yngty.github.io/categories/C-C/"/>
    
    
    <category term="C++20" scheme="https://yngty.github.io/tags/C-20/"/>
    
    <category term="const" scheme="https://yngty.github.io/tags/const/"/>
    
  </entry>
  
  <entry>
    <title>macOS 设置面板快捷链接</title>
    <link href="https://yngty.github.io/2023/12/28/macos/macOS-%E8%AE%BE%E7%BD%AE%E9%9D%A2%E6%9D%BF%E5%BF%AB%E6%8D%B7%E9%93%BE%E6%8E%A5/"/>
    <id>https://yngty.github.io/2023/12/28/macos/macOS-%E8%AE%BE%E7%BD%AE%E9%9D%A2%E6%9D%BF%E5%BF%AB%E6%8D%B7%E9%93%BE%E6%8E%A5/</id>
    <published>2023-12-28T17:41:12.000Z</published>
    <updated>2024-07-18T02:24:46.938Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Accessibility-Preference-Pane&quot;&gt;&lt;a href=&quot;#Accessibility-Preference-Pane&quot; class=&quot;headerlink&quot; title=&quot;Accessibility Preference Pane&quot;&gt;&lt;/a&gt;Accessibility Preference Pane&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Main    x-apple.systempreferences:com.apple.preference.universalaccess&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Display x-apple.systempreferences:com.apple.preference.universalaccess?Seeing_Display&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Zoom    x-apple.systempreferences:com.apple.preference.universalaccess?Seeing_Zoom&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;VoiceOver   x-apple.systempreferences:com.apple.preference.universalaccess?Seeing_VoiceOver&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Descriptions    x-apple.systempreferences:com.apple.preference.universalaccess?Media_Descriptions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Captions    x-apple.systempreferences:com.apple.preference.universalaccess?Captioning&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Audio   x-apple.systempreferences:com.apple.preference.universalaccess?Hearing&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Keyboard    x-apple.systempreferences:com.apple.preference.universalaccess?Keyboard&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Mouse &amp;amp; Trackpad    x-apple.systempreferences:com.apple.preference.universalaccess?Mouse&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Switch Control  x-apple.systempreferences:com.apple.preference.universalaccess?Switch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dictation   x-apple.systempreferences:com.apple.preference.universalaccess?SpeakableItems&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="macOS" scheme="https://yngty.github.io/categories/macOS/"/>
    
    
    <category term="macOS" scheme="https://yngty.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>TLS False Start</title>
    <link href="https://yngty.github.io/2023/12/11/network/TLS/TLS-False-Start/"/>
    <id>https://yngty.github.io/2023/12/11/network/TLS/TLS-False-Start/</id>
    <published>2023-12-11T11:39:47.000Z</published>
    <updated>2024-07-18T02:24:46.938Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;什么是TLS-False-Start？&quot;&gt;&lt;a href=&quot;#什么是TLS-False-Start？&quot; class=&quot;headerlink&quot; title=&quot;什么是TLS False Start？&quot;&gt;&lt;/a&gt;什么是TLS False Start？&lt;/h1&gt;&lt;p&gt;在</summary>
        
      
    
    
    
    
    <category term="SSL/TLS" scheme="https://yngty.github.io/tags/SSL-TLS/"/>
    
  </entry>
  
  <entry>
    <title>Application-Layer Protocol Negotiation</title>
    <link href="https://yngty.github.io/2023/12/11/network/TLS/ALPN/"/>
    <id>https://yngty.github.io/2023/12/11/network/TLS/ALPN/</id>
    <published>2023-12-11T10:07:03.000Z</published>
    <updated>2024-07-18T02:24:46.938Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;&lt;code&gt;ALPN&lt;/code&gt;(&lt;code&gt;Application-Layer Protocol Negotiation&lt;/code&gt;)应用层协议协商, 当单个服务器端口号（例如端口 &lt;code&gt;443&lt;/code&gt;）上支持多个应用程序协议时，客户端和服务器需要协商用于每个连接的应用程序协议。希望在不增加客户端和服务器之间的网络往返次数的情况下完成此协商，因为每次往返都会降低最终用户的体验。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ALPN&lt;/code&gt; 作为 &lt;code&gt;TSL&lt;/code&gt;的扩展，客户端会将支持的应用程序协议列表作为 &lt;code&gt;TLS ClientHello&lt;/code&gt; 消息的一部分发送给服务器，服务器选择一个协议，并将所选协议作为 &lt;code&gt;TLS ServerHello&lt;/code&gt; 消息的一部分发送给客户端。因此，可以在 &lt;code&gt;TLS&lt;/code&gt; 握手中完成应用协议协商，而无需添加网络往返，并且允许服务器根据需要，将不同的证书与每个应用协议相关联。&lt;/p&gt;</summary>
    
    
    
    
    <category term="SSL/TLS" scheme="https://yngty.github.io/tags/SSL-TLS/"/>
    
  </entry>
  
  <entry>
    <title>TCP Nagle算法与ACK延迟确认</title>
    <link href="https://yngty.github.io/2023/11/20/network/TCP-Nagle%E7%AE%97%E6%B3%95%E4%B8%8EACK%E5%BB%B6%E8%BF%9F%E7%A1%AE%E8%AE%A4/"/>
    <id>https://yngty.github.io/2023/11/20/network/TCP-Nagle%E7%AE%97%E6%B3%95%E4%B8%8EACK%E5%BB%B6%E8%BF%9F%E7%A1%AE%E8%AE%A4/</id>
    <published>2023-11-20T11:30:52.000Z</published>
    <updated>2024-07-18T02:24:46.938Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>c++ Memory Order</title>
    <link href="https://yngty.github.io/2023/11/07/c++/c-Memory-Order/"/>
    <id>https://yngty.github.io/2023/11/07/c++/c-Memory-Order/</id>
    <published>2023-11-07T16:20:11.000Z</published>
    <updated>2024-07-18T02:24:46.938Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;高级语言经过编译器将源码转为机器指令运行，其中的运行顺序和代码中的顺序有很大差异，主要是下面三个原因: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译器重排&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CPU&lt;/code&gt; 乱序执行&lt;/li&gt;
&lt;li&gt;存储器硬件设计，不同线程看到的顺序不一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 &lt;code&gt;c++&lt;/code&gt; 中线程同步只有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原子变量进行同步&lt;/li&gt;
&lt;li&gt;锁(&lt;code&gt;Mutex&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里我们主要讨论原子变量的操作。&lt;/p&gt;
&lt;h1 id=&quot;Memory-Order&quot;&gt;&lt;a href=&quot;#Memory-Order&quot; class=&quot;headerlink&quot; title=&quot;Memory Order&quot;&gt;&lt;/a&gt;Memory Order&lt;/h1&gt;&lt;p&gt;&lt;code&gt;C++11&lt;/code&gt; 规定了六种不同的 &lt;code&gt;memory order&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Relaxed&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Consume&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Acquire&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Release&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Acquire-Release&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Sequential Consistent&lt;/code&gt;</summary>
    
    
    
    <category term="C/C++" scheme="https://yngty.github.io/categories/C-C/"/>
    
    
    <category term="Memory Order" scheme="https://yngty.github.io/tags/Memory-Order/"/>
    
  </entry>
  
  <entry>
    <title>std::thread 注意事项</title>
    <link href="https://yngty.github.io/2023/11/03/c++/std-thread-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>https://yngty.github.io/2023/11/03/c++/std-thread-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</id>
    <published>2023-11-03T14:35:22.000Z</published>
    <updated>2024-07-18T02:24:46.938Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;join-和-detach&quot;&gt;&lt;a href=&quot;#join-和-detach&quot; class=&quot;headerlink&quot; title=&quot;join 和 detach&quot;&gt;&lt;/a&gt;&lt;code&gt;join&lt;/code&gt; 和 &lt;code&gt;detach&lt;/code&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;join&lt;/code&gt; 或者 &lt;code&gt;detach&lt;/code&gt; 只能调用&lt;strong&gt;一次&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当调用 &lt;code&gt;join&lt;/code&gt; 或者 &lt;code&gt;detach&lt;/code&gt; 之后会将持有的线程ID置为 &lt;code&gt;0&lt;/code&gt;, 再次调用会抛异常。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;thread::join&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; ec = EINVAL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!__libcpp_thread_isnull(&amp;amp;__t_))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ec = __libcpp_thread_join(&amp;amp;__t_);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ec == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            __t_ = _LIBCPP_NULL_THREAD;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ec)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __throw_system_error(ec, &lt;span class=&quot;string&quot;&gt;&amp;quot;thread::join failed&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;thread::detach&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; ec = EINVAL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!__libcpp_thread_isnull(&amp;amp;__t_))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ec = __libcpp_thread_detach(&amp;amp;__t_);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ec == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            __t_ = _LIBCPP_NULL_THREAD;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ec)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __throw_system_error(ec, &lt;span class=&quot;string&quot;&gt;&amp;quot;thread::detach failed&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="C/C++" scheme="https://yngty.github.io/categories/C-C/"/>
    
    
    <category term="thread" scheme="https://yngty.github.io/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>CSS Layout</title>
    <link href="https://yngty.github.io/2023/09/04/css/CSS-Layout/"/>
    <id>https://yngty.github.io/2023/09/04/css/CSS-Layout/</id>
    <published>2023-09-04T14:09:14.000Z</published>
    <updated>2024-07-18T02:24:46.938Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Grid&quot;&gt;&lt;a href=&quot;#Grid&quot; class=&quot;headerlink&quot; title=&quot;Grid&quot;&gt;&lt;/a&gt;Grid&lt;/h1&gt;&lt;h2 id=&quot;fr&quot;&gt;&lt;a href=&quot;#fr&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
    <category term="css" scheme="https://yngty.github.io/tags/css/"/>
    
  </entry>
  
</feed>
