<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>瓜地</title>
  
  <subtitle>不学无术</subtitle>
  <link href="https://yngty.github.io/atom.xml" rel="self"/>
  
  <link href="https://yngty.github.io/"/>
  <updated>2021-11-15T03:47:49.684Z</updated>
  <id>https://yngty.github.io/</id>
  
  <author>
    <name>yngty</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Effective C++ 19：设计 class 犹如设计 type</title>
    <link href="https://yngty.github.io/2021/11/11/effecitve-cpp/effective-cpp-19/"/>
    <id>https://yngty.github.io/2021/11/11/effecitve-cpp/effective-cpp-19/</id>
    <published>2021-11-11T16:36:55.000Z</published>
    <updated>2021-11-15T03:47:49.684Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 19: Teat class design as type</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>C++ 中 malloc 和 new 的区别</title>
    <link href="https://yngty.github.io/2021/11/08/c++/C-%E4%B8%ADmalloc%E5%92%8Cnew%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://yngty.github.io/2021/11/08/c++/C-%E4%B8%ADmalloc%E5%92%8Cnew%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2021-11-08T14:44:44.000Z</published>
    <updated>2021-11-08T15:18:56.769Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;特征&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;new&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;malloc&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td</summary>
        
      
    
    
    
    <category term="C/C++" scheme="https://yngty.github.io/categories/C-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 18：让接口容易被正确使用，不易被误用</title>
    <link href="https://yngty.github.io/2021/11/08/effecitve-cpp/effective-cpp-18/"/>
    <id>https://yngty.github.io/2021/11/08/effecitve-cpp/effective-cpp-18/</id>
    <published>2021-11-08T07:48:13.000Z</published>
    <updated>2021-11-08T07:50:34.187Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 18: Make interfaces easy to use correctly and hard to use</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 17：在单独的语句中将 new 的对象放入智能指针</title>
    <link href="https://yngty.github.io/2021/11/08/effecitve-cpp/effective-cpp-17/"/>
    <id>https://yngty.github.io/2021/11/08/effecitve-cpp/effective-cpp-17/</id>
    <published>2021-11-08T01:53:13.000Z</published>
    <updated>2021-11-08T02:11:23.841Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 17: Store newed objects in smart pointers in standalone statements.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;以单独的语句将</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 16：使用同样的形式来new和delete</title>
    <link href="https://yngty.github.io/2021/11/08/effecitve-cpp/effective-cpp-16/"/>
    <id>https://yngty.github.io/2021/11/08/effecitve-cpp/effective-cpp-16/</id>
    <published>2021-11-08T01:23:53.000Z</published>
    <updated>2021-11-08T02:12:52.725Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 16: Use the same form in corresponding uses of new and delete.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;如果你用 &lt;code&gt;new&lt;/code&gt;</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 15：在资源管理类中提供对原始资源的访问</title>
    <link href="https://yngty.github.io/2021/11/05/effecitve-cpp/effective-cpp-15/"/>
    <id>https://yngty.github.io/2021/11/05/effecitve-cpp/effective-cpp-15/</id>
    <published>2021-11-05T07:58:35.000Z</published>
    <updated>2021-11-08T01:19:40.600Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 15: Provide access to raw resources in resource-managing classes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;APIs&lt;/code&gt;</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 14：在资源管理类中小心 copying 行为</title>
    <link href="https://yngty.github.io/2021/11/04/effecitve-cpp/effective-cpp-14/"/>
    <id>https://yngty.github.io/2021/11/04/effecitve-cpp/effective-cpp-14/</id>
    <published>2021-11-04T16:00:01.000Z</published>
    <updated>2021-11-04T16:33:29.494Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 14: Think carefully about copying behavior in resource-managing classes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;设计一个</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 13：以对象管理资源</title>
    <link href="https://yngty.github.io/2021/11/02/effecitve-cpp/effective-cpp-13/"/>
    <id>https://yngty.github.io/2021/11/02/effecitve-cpp/effective-cpp-13/</id>
    <published>2021-11-02T12:30:45.000Z</published>
    <updated>2021-11-02T12:32:55.585Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 13: Use objects to manage</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 12：复制对象时勿忘其每一个成分</title>
    <link href="https://yngty.github.io/2021/11/02/effecitve-cpp/effective-cpp-12/"/>
    <id>https://yngty.github.io/2021/11/02/effecitve-cpp/effective-cpp-12/</id>
    <published>2021-11-02T09:36:33.000Z</published>
    <updated>2021-11-02T09:45:34.385Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 12: Copy all parts of an object&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;正确拷贝函数实现：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 11：赋值运算符需要考虑自我赋值问题</title>
    <link href="https://yngty.github.io/2021/11/01/effecitve-cpp/effective-cpp-11/"/>
    <id>https://yngty.github.io/2021/11/01/effecitve-cpp/effective-cpp-11/</id>
    <published>2021-11-01T05:12:55.000Z</published>
    <updated>2021-11-02T08:59:39.536Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 11: Handle assignment to self in</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 10：赋值运算符要返回自己的引用</title>
    <link href="https://yngty.github.io/2021/11/01/effecitve-cpp/effective-cpp-10/"/>
    <id>https://yngty.github.io/2021/11/01/effecitve-cpp/effective-cpp-10/</id>
    <published>2021-11-01T04:59:28.000Z</published>
    <updated>2021-11-01T05:05:33.855Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 10：Have assignment operators return a reference to</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 9：绝不在构造和析构过程中调用 virtual 函数</title>
    <link href="https://yngty.github.io/2021/11/01/effecitve-cpp/effective-cpp-9/"/>
    <id>https://yngty.github.io/2021/11/01/effecitve-cpp/effective-cpp-9/</id>
    <published>2021-11-01T04:03:51.000Z</published>
    <updated>2021-11-01T04:57:51.747Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 9: Never call virtual functions during construction or destruction.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在构造和析构期间不要调用</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 8：析构函数不要抛出异常</title>
    <link href="https://yngty.github.io/2021/10/25/effecitve-cpp/effective-cpp-8/"/>
    <id>https://yngty.github.io/2021/10/25/effecitve-cpp/effective-cpp-8/</id>
    <published>2021-10-25T05:29:41.000Z</published>
    <updated>2021-11-01T04:04:20.395Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 8: Prevent exceptions from leaving destructors.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;C++&lt;/code&gt;</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 7：为多态基类声明 virtual 析构函数</title>
    <link href="https://yngty.github.io/2021/10/25/effecitve-cpp/effective-cpp-7/"/>
    <id>https://yngty.github.io/2021/10/25/effecitve-cpp/effective-cpp-7/</id>
    <published>2021-10-25T05:09:45.000Z</published>
    <updated>2021-10-25T08:28:07.665Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 7: Declare destructors virtual in polymorphic base</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 6：若不想使用编译器自动生成的函数，就该明确拒绝</title>
    <link href="https://yngty.github.io/2021/10/25/effecitve-cpp/effective-cpp-6/"/>
    <id>https://yngty.github.io/2021/10/25/effecitve-cpp/effective-cpp-6/</id>
    <published>2021-10-25T03:32:26.000Z</published>
    <updated>2021-10-25T03:58:31.727Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 6: Explicitly disallow the use of compiler-generated functions you do not</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 5：了解c++默默编写并调用哪些函数</title>
    <link href="https://yngty.github.io/2021/10/24/effecitve-cpp/effective-cpp-5/"/>
    <id>https://yngty.github.io/2021/10/24/effecitve-cpp/effective-cpp-5/</id>
    <published>2021-10-24T12:17:05.000Z</published>
    <updated>2021-10-24T12:47:55.753Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 5: Know what functions C++ silently writes and calls&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;默认函数&quot;&gt;&lt;a href=&quot;#默认函数&quot;</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 4：确定对象被使用前已先被初始化</title>
    <link href="https://yngty.github.io/2021/01/13/effecitve-cpp/effective-cpp-4/"/>
    <id>https://yngty.github.io/2021/01/13/effecitve-cpp/effective-cpp-4/</id>
    <published>2021-01-13T14:41:25.000Z</published>
    <updated>2021-10-24T12:19:49.547Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 4: Make sure that objects are initialized before they’re used.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;手工初始化内置对象&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 3：尽可能使用 const</title>
    <link href="https://yngty.github.io/2021/01/05/effecitve-cpp/effective-cpp-3/"/>
    <id>https://yngty.github.io/2021/01/05/effecitve-cpp/effective-cpp-3/</id>
    <published>2021-01-05T14:04:32.000Z</published>
    <updated>2021-10-24T11:46:00.678Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item3: Use const whenever possible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;常量的声明&quot;&gt;&lt;a href=&quot;#常量的声明&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 2：尽量以const, enum, inline 替换 &amp;#35;define</title>
    <link href="https://yngty.github.io/2020/12/14/effecitve-cpp/effective-cpp-2/"/>
    <id>https://yngty.github.io/2020/12/14/effecitve-cpp/effective-cpp-2/</id>
    <published>2020-12-14T04:36:49.000Z</published>
    <updated>2021-10-24T11:46:00.678Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 2: Prefer consts, enums, and inlines to #defines&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们先看看&lt;code&gt;#deifne&lt;/code&gt; 有哪些的问题:&lt;/p&gt;
&lt;h1</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 1：将C++视作一系列的语言</title>
    <link href="https://yngty.github.io/2020/12/07/effecitve-cpp/effective-cpp-1/"/>
    <id>https://yngty.github.io/2020/12/07/effecitve-cpp/effective-cpp-1/</id>
    <published>2020-12-07T12:40:56.000Z</published>
    <updated>2021-10-24T11:46:00.678Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 1: View C++ as a federation of languages&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一开始，&lt;code&gt;Ｃ++&lt;/code&gt; 只是 &lt;code&gt;Ｃ&lt;/code&gt;</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
</feed>
