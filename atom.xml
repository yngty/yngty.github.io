<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Symbol Crash</title>
  
  <subtitle>不学无术</subtitle>
  <link href="https://yngty.github.io/atom.xml" rel="self"/>
  
  <link href="https://yngty.github.io/"/>
  <updated>2024-01-08T07:55:15.104Z</updated>
  <id>https://yngty.github.io/</id>
  
  <author>
    <name>yngty</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++ aggregate</title>
    <link href="https://yngty.github.io/2024/01/08/c++/C-aggregates/"/>
    <id>https://yngty.github.io/2024/01/08/c++/C-aggregates/</id>
    <published>2024-01-08T13:55:00.000Z</published>
    <updated>2024-01-08T07:55:15.104Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;什么是聚合类型-aggregate&quot;&gt;&lt;a href=&quot;#什么是聚合类型-aggregate&quot; class=&quot;headerlink&quot; title=&quot;什么是聚合类型(aggregate)&quot;&gt;&lt;/a&gt;什么是聚合类型(aggregate)&lt;/h1&gt;&lt;h2 id=&quot;在-C-03-中的定义&quot;&gt;&lt;a href=&quot;#在-C-03-中的定义&quot; class=&quot;headerlink&quot; title=&quot;在 C++03 中的定义&quot;&gt;&lt;/a&gt;在 C++03 中的定义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;不能有用户声明的构造函数&lt;/li&gt;
&lt;li&gt;没有私有或受保护的非静态数据成员，可以拥有任意数量的私有和受保护的成员函数（但不能是构造函数）以及任意数量的私有或受保护的静态数据成员和静态成员函数&lt;/li&gt;
&lt;li&gt;可以具有用户声明或用户定义的复制赋值运算符和或析构函数&lt;/li&gt;
&lt;li&gt;没有基类&lt;/li&gt;
&lt;li&gt;没有虚函数&lt;/li&gt;
&lt;li&gt;数组是聚合，即使它是非聚合类类型的数组&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="C/C++" scheme="https://yngty.github.io/categories/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>macOS Ventura App 管理</title>
    <link href="https://yngty.github.io/2024/01/04/macos/macOS-Ventura-App-%E7%AE%A1%E7%90%86/"/>
    <id>https://yngty.github.io/2024/01/04/macos/macOS-Ventura-App-%E7%AE%A1%E7%90%86/</id>
    <published>2024-01-04T14:34:10.000Z</published>
    <updated>2024-01-08T07:55:15.104Z</updated>
    
    
    <summary type="html">&lt;p&gt;从 &lt;code&gt;macOS Monterey&lt;/code&gt; 开始，如果应用程序被未由相同开发团队签名且未由 &lt;code&gt;NSUpdateSecurityPolicy&lt;/code&gt; 允许的东西修改，&lt;code&gt;macOS&lt;/code&gt; 将阻止修改并通知用户应用程序希望管理其他应用程序。点击通知会将用户发送到系统设置，他们可以在那里允许应用程序更新和修改其他应用程序。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/appmanager.png&quot; alt=&quot;appmanager&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="macOS" scheme="https://yngty.github.io/categories/macOS/"/>
    
    
    <category term="macOS" scheme="https://yngty.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>深入了解 C++20 中的 consteval</title>
    <link href="https://yngty.github.io/2023/12/29/c++/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3C-20%E4%B8%AD%E7%9A%84consteval%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>https://yngty.github.io/2023/12/29/c++/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3C-20%E4%B8%AD%E7%9A%84consteval%E5%85%B3%E9%94%AE%E5%AD%97/</id>
    <published>2023-12-29T18:16:18.000Z</published>
    <updated>2024-01-08T07:55:15.104Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;用最简单的术语来说，一个只能应用于函数的 &lt;code&gt;consteval&lt;/code&gt; 关键字, 保证它产生一个编译时间常数。否则会导致编译错误。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cppreference&lt;/code&gt; 页面对 &lt;code&gt;consteval&lt;/code&gt; 说明符有如下描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;consteval&lt;/code&gt; 指定函数是立即函数，也就是说，对该函数的每次调用都必须产生一个编译时常量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;什么是立即函数？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不能是协程&lt;/li&gt;
&lt;li&gt;函数主体中不能有 &lt;code&gt;throw&lt;/code&gt; 语句&lt;/li&gt;
&lt;li&gt;不能有 &lt;code&gt;goto&lt;/code&gt; 语句或标签语句，除了 &lt;code&gt;case&lt;/code&gt; 和 &lt;code&gt;default&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;参数和返回类型必须是&lt;a href=&quot;https://en.cppreference.com/w/cpp/named_req/LiteralType&quot;&gt;LiteralType&lt;/a&gt;,简单地说，是一个可以在编译时计算的类型（比如所有可以在 &lt;code&gt;constexpr&lt;/code&gt; 上下文中使用的类型）&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="C/C++" scheme="https://yngty.github.io/categories/C-C/"/>
    
    
    <category term="C++20" scheme="https://yngty.github.io/tags/C-20/"/>
    
    <category term="const" scheme="https://yngty.github.io/tags/const/"/>
    
  </entry>
  
  <entry>
    <title>深入了解 C++20 中的 constinit</title>
    <link href="https://yngty.github.io/2023/12/29/c++/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3C++20%E4%B8%AD%E7%9A%84constinit%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>https://yngty.github.io/2023/12/29/c++/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3C++20%E4%B8%AD%E7%9A%84constinit%E5%85%B3%E9%94%AE%E5%AD%97/</id>
    <published>2023-12-29T17:41:16.000Z</published>
    <updated>2024-01-08T07:55:15.104Z</updated>
    
    
    <summary type="html">&lt;p&gt;在 &lt;code&gt;C++&lt;/code&gt; 中，存储变量的方式有几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;存储期（&lt;code&gt;Storage Duration&lt;/code&gt;）：&lt;br&gt;存储期是指变量在程序中存在的时间段。在 &lt;code&gt;C++&lt;/code&gt; 中，有三种主要的存储期：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动存储期（&lt;code&gt;Automatic Storage Duration&lt;/code&gt;）：变量在函数或代码块执行时创建，函数执行结束时销毁。&lt;/li&gt;
&lt;li&gt;动态存储期（&lt;code&gt;Dynamic Storage Duration&lt;/code&gt;）： 使用 &lt;code&gt;new&lt;/code&gt; 或 &lt;code&gt;malloc&lt;/code&gt; 分配的内存，直到使用 &lt;code&gt;delete&lt;/code&gt; 或 &lt;code&gt;free&lt;/code&gt; 手动释放为止。&lt;/li&gt;
&lt;li&gt;静态存储期（&lt;code&gt;Static Storage Duration&lt;/code&gt;）： 变量在程序启动时创建，在整个程序运行期间都存在，直到程序结束才销毁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;静态存储变量：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;静态存储变量是在程序启动时创建，一直存在于整个程序运行期间的变量。这类变量有两种主要形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全局变量（&lt;code&gt;Global Variables&lt;/code&gt;）： 在函数外部声明的变量，可以被程序中的所有函数访问。&lt;/li&gt;
&lt;li&gt;静态局部变量（&lt;code&gt;Static Local Variables&lt;/code&gt;）： 在函数内部使用 &lt;code&gt;static&lt;/code&gt; 关键字声明的变量，与自动存储期变量不同，它在函数调用之间保持其值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 &lt;code&gt;C++&lt;/code&gt; 中，我们经常使用静态存储期变量，包括全局变量和使用 &lt;code&gt;static&lt;/code&gt; 关键字声明的局部变量。然而，这些变量并不保证在程序执行前被初始化，除非它们被声明为 &lt;code&gt;const&lt;/code&gt; 常量。为了解决这一问题，&lt;code&gt;C++20&lt;/code&gt; 引入了 &lt;code&gt;constinit&lt;/code&gt; 关键字，它为我们提供了一种保证变量在程序启动时被初始化的方式，从而增强了可预测性和可靠性。&lt;/p&gt;
&lt;p&gt;尽管 &lt;code&gt;constinit&lt;/code&gt; 确保变量在程序启动时被初始化，但这并不意味着这些变量是不可修改的常量。相反，这个关键字允许变量在初始化后在运行时或编译时上下文中被修改。&lt;/p&gt;
&lt;p&gt;因此，&lt;code&gt;constinit&lt;/code&gt; 关键字为我们提供了一种在使用静态存储期变量时获得初始化保证的方法，同时允许在初始化后对其进行适当的修改。&lt;/p&gt;</summary>
    
    
    
    <category term="C/C++" scheme="https://yngty.github.io/categories/C-C/"/>
    
    
    <category term="C++20" scheme="https://yngty.github.io/tags/C-20/"/>
    
    <category term="const" scheme="https://yngty.github.io/tags/const/"/>
    
  </entry>
  
  <entry>
    <title>macOS 设置面板快捷链接</title>
    <link href="https://yngty.github.io/2023/12/28/macos/macOS-%E8%AE%BE%E7%BD%AE%E9%9D%A2%E6%9D%BF%E5%BF%AB%E6%8D%B7%E9%93%BE%E6%8E%A5/"/>
    <id>https://yngty.github.io/2023/12/28/macos/macOS-%E8%AE%BE%E7%BD%AE%E9%9D%A2%E6%9D%BF%E5%BF%AB%E6%8D%B7%E9%93%BE%E6%8E%A5/</id>
    <published>2023-12-28T17:41:12.000Z</published>
    <updated>2024-01-08T07:55:15.104Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Accessibility-Preference-Pane&quot;&gt;&lt;a href=&quot;#Accessibility-Preference-Pane&quot; class=&quot;headerlink&quot; title=&quot;Accessibility Preference Pane&quot;&gt;&lt;/a&gt;Accessibility Preference Pane&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Main    x-apple.systempreferences:com.apple.preference.universalaccess&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Display x-apple.systempreferences:com.apple.preference.universalaccess?Seeing_Display&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Zoom    x-apple.systempreferences:com.apple.preference.universalaccess?Seeing_Zoom&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;VoiceOver   x-apple.systempreferences:com.apple.preference.universalaccess?Seeing_VoiceOver&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Descriptions    x-apple.systempreferences:com.apple.preference.universalaccess?Media_Descriptions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Captions    x-apple.systempreferences:com.apple.preference.universalaccess?Captioning&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Audio   x-apple.systempreferences:com.apple.preference.universalaccess?Hearing&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Keyboard    x-apple.systempreferences:com.apple.preference.universalaccess?Keyboard&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Mouse &amp;amp; Trackpad    x-apple.systempreferences:com.apple.preference.universalaccess?Mouse&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Switch Control  x-apple.systempreferences:com.apple.preference.universalaccess?Switch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dictation   x-apple.systempreferences:com.apple.preference.universalaccess?SpeakableItems&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="macOS" scheme="https://yngty.github.io/categories/macOS/"/>
    
    
    <category term="macOS" scheme="https://yngty.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>TLS False Start</title>
    <link href="https://yngty.github.io/2023/12/11/network/TLS/TLS-False-Start/"/>
    <id>https://yngty.github.io/2023/12/11/network/TLS/TLS-False-Start/</id>
    <published>2023-12-11T11:39:47.000Z</published>
    <updated>2024-01-08T07:55:15.108Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;什么是TLS-False-Start？&quot;&gt;&lt;a href=&quot;#什么是TLS-False-Start？&quot; class=&quot;headerlink&quot; title=&quot;什么是TLS False Start？&quot;&gt;&lt;/a&gt;什么是TLS False Start？&lt;/h1&gt;&lt;p&gt;在</summary>
        
      
    
    
    
    
    <category term="SSL/TLS" scheme="https://yngty.github.io/tags/SSL-TLS/"/>
    
  </entry>
  
  <entry>
    <title>Application-Layer Protocol Negotiation</title>
    <link href="https://yngty.github.io/2023/12/11/network/TLS/ALPN/"/>
    <id>https://yngty.github.io/2023/12/11/network/TLS/ALPN/</id>
    <published>2023-12-11T10:07:03.000Z</published>
    <updated>2024-01-08T07:55:15.108Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;&lt;code&gt;ALPN&lt;/code&gt;(&lt;code&gt;Application-Layer Protocol Negotiation&lt;/code&gt;)应用层协议协商, 当单个服务器端口号（例如端口 &lt;code&gt;443&lt;/code&gt;）上支持多个应用程序协议时，客户端和服务器需要协商用于每个连接的应用程序协议。希望在不增加客户端和服务器之间的网络往返次数的情况下完成此协商，因为每次往返都会降低最终用户的体验。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ALPN&lt;/code&gt; 作为 &lt;code&gt;TSL&lt;/code&gt;的扩展，客户端会将支持的应用程序协议列表作为 &lt;code&gt;TLS ClientHello&lt;/code&gt; 消息的一部分发送给服务器，服务器选择一个协议，并将所选协议作为 &lt;code&gt;TLS ServerHello&lt;/code&gt; 消息的一部分发送给客户端。因此，可以在 &lt;code&gt;TLS&lt;/code&gt; 握手中完成应用协议协商，而无需添加网络往返，并且允许服务器根据需要，将不同的证书与每个应用协议相关联。&lt;/p&gt;</summary>
    
    
    
    
    <category term="SSL/TLS" scheme="https://yngty.github.io/tags/SSL-TLS/"/>
    
  </entry>
  
  <entry>
    <title>TCP Nagle算法与ACK延迟确认</title>
    <link href="https://yngty.github.io/2023/11/20/network/TCP-Nagle%E7%AE%97%E6%B3%95%E4%B8%8EACK%E5%BB%B6%E8%BF%9F%E7%A1%AE%E8%AE%A4/"/>
    <id>https://yngty.github.io/2023/11/20/network/TCP-Nagle%E7%AE%97%E6%B3%95%E4%B8%8EACK%E5%BB%B6%E8%BF%9F%E7%A1%AE%E8%AE%A4/</id>
    <published>2023-11-20T11:30:52.000Z</published>
    <updated>2024-01-08T07:55:15.108Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>c++ Memory Order</title>
    <link href="https://yngty.github.io/2023/11/07/c++/c-Memory-Order/"/>
    <id>https://yngty.github.io/2023/11/07/c++/c-Memory-Order/</id>
    <published>2023-11-07T16:20:11.000Z</published>
    <updated>2024-01-08T07:55:15.104Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;高级语言经过编译器将源码转为机器指令运行，其中的运行顺序和代码中的顺序有很大差异，主要是下面三个原因: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译器重排&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CPU&lt;/code&gt; 乱序执行&lt;/li&gt;
&lt;li&gt;存储器硬件设计，不同线程看到的顺序不一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 &lt;code&gt;c++&lt;/code&gt; 中线程同步只有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原子变量进行同步&lt;/li&gt;
&lt;li&gt;锁(&lt;code&gt;Mutex&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里我们主要讨论原子变量的操作。&lt;/p&gt;
&lt;h1 id=&quot;Memory-Order&quot;&gt;&lt;a href=&quot;#Memory-Order&quot; class=&quot;headerlink&quot; title=&quot;Memory Order&quot;&gt;&lt;/a&gt;Memory Order&lt;/h1&gt;&lt;p&gt;&lt;code&gt;C++11&lt;/code&gt; 规定了六种不同的 &lt;code&gt;memory order&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Relaxed&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Consume&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Acquire&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Release&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Acquire-Release&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Sequential Consistent&lt;/code&gt;</summary>
    
    
    
    <category term="C/C++" scheme="https://yngty.github.io/categories/C-C/"/>
    
    
    <category term="Memory Order" scheme="https://yngty.github.io/tags/Memory-Order/"/>
    
  </entry>
  
  <entry>
    <title>std::thread 注意事项</title>
    <link href="https://yngty.github.io/2023/11/03/c++/std-thread-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>https://yngty.github.io/2023/11/03/c++/std-thread-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</id>
    <published>2023-11-03T14:35:22.000Z</published>
    <updated>2024-01-08T07:55:15.104Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;join-和-detach&quot;&gt;&lt;a href=&quot;#join-和-detach&quot; class=&quot;headerlink&quot; title=&quot;join 和 detach&quot;&gt;&lt;/a&gt;&lt;code&gt;join&lt;/code&gt; 和 &lt;code&gt;detach&lt;/code&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;join&lt;/code&gt; 或者 &lt;code&gt;detach&lt;/code&gt; 只能调用&lt;strong&gt;一次&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当调用 &lt;code&gt;join&lt;/code&gt; 或者 &lt;code&gt;detach&lt;/code&gt; 之后会将持有的线程ID置为 &lt;code&gt;0&lt;/code&gt;, 再次调用会抛异常。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;thread::join&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; ec = EINVAL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!__libcpp_thread_isnull(&amp;amp;__t_))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ec = __libcpp_thread_join(&amp;amp;__t_);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ec == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            __t_ = _LIBCPP_NULL_THREAD;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ec)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __throw_system_error(ec, &lt;span class=&quot;string&quot;&gt;&amp;quot;thread::join failed&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;thread::detach&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; ec = EINVAL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!__libcpp_thread_isnull(&amp;amp;__t_))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ec = __libcpp_thread_detach(&amp;amp;__t_);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ec == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            __t_ = _LIBCPP_NULL_THREAD;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ec)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __throw_system_error(ec, &lt;span class=&quot;string&quot;&gt;&amp;quot;thread::detach failed&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="C/C++" scheme="https://yngty.github.io/categories/C-C/"/>
    
    
    <category term="thread" scheme="https://yngty.github.io/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>CSS Layout</title>
    <link href="https://yngty.github.io/2023/09/04/css/CSS-Layout/"/>
    <id>https://yngty.github.io/2023/09/04/css/CSS-Layout/</id>
    <published>2023-09-04T14:09:14.000Z</published>
    <updated>2024-01-08T07:55:15.104Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Grid&quot;&gt;&lt;a href=&quot;#Grid&quot; class=&quot;headerlink&quot; title=&quot;Grid&quot;&gt;&lt;/a&gt;Grid&lt;/h1&gt;&lt;h2 id=&quot;fr&quot;&gt;&lt;a href=&quot;#fr&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
    <category term="css" scheme="https://yngty.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>mongodb 入门-Aggregate</title>
    <link href="https://yngty.github.io/2023/08/31/mongodb/mongodb-%E5%85%A5%E9%97%A8-Aggregate/"/>
    <id>https://yngty.github.io/2023/08/31/mongodb/mongodb-%E5%85%A5%E9%97%A8-Aggregate/</id>
    <published>2023-08-31T10:48:46.000Z</published>
    <updated>2024-01-08T07:55:15.108Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;聚合操作&quot;&gt;&lt;a href=&quot;#聚合操作&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="mongodb" scheme="https://yngty.github.io/categories/mongodb/"/>
    
    
    <category term="mongodb" scheme="https://yngty.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>mongodb 入门-CRUD</title>
    <link href="https://yngty.github.io/2023/08/27/mongodb/mongodb-%E5%85%A5%E9%97%A8-CRUD/"/>
    <id>https://yngty.github.io/2023/08/27/mongodb/mongodb-%E5%85%A5%E9%97%A8-CRUD/</id>
    <published>2023-08-27T15:34:59.000Z</published>
    <updated>2024-01-08T07:55:15.108Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;文档主键&quot;&gt;&lt;a href=&quot;#文档主键&quot; class=&quot;headerlink&quot; title=&quot;文档主键&quot;&gt;&lt;/a&gt;文档主键&lt;/h1&gt;&lt;h2 id=&quot;文档主键-id&quot;&gt;&lt;a href=&quot;#文档主键-id&quot; class=&quot;headerlink&quot; title=&quot;文档主键 _id&quot;&gt;&lt;/a&gt;文档主键 &lt;code&gt;_id&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;文档主键 &lt;code&gt;_id&lt;/code&gt; 是每篇文档必备的字段,具有以下特性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文档主键的唯一性&lt;/li&gt;
&lt;li&gt;支持所有数据类型(数组除外)&lt;/li&gt;
&lt;li&gt;复合主键&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;对象主键-ObjectId&quot;&gt;&lt;a href=&quot;#对象主键-ObjectId&quot; class=&quot;headerlink&quot; title=&quot;对象主键 ObjectId&quot;&gt;&lt;/a&gt;对象主键 &lt;code&gt;ObjectId&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;当我们不提供主键，&lt;code&gt;MongoDB&lt;/code&gt; 自动为我们生成的默认对象主键 &lt;code&gt;ObjectId&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认的文档主键&lt;/li&gt;
&lt;li&gt;可以快速生成的 &lt;code&gt;12&lt;/code&gt; 字节 &lt;code&gt;id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;包含创建时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;ObjectId&lt;/code&gt; 默认值&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta prompt_&quot;&gt;test&amp;gt; &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;ObjectId()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ObjectId(&amp;quot;64eeed51b64b9d7e95e6b8ea&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;手动设置 &lt;code&gt;ObjectId&lt;/code&gt; 的值&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta prompt_&quot;&gt;test&amp;gt; &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;ObjectId(&lt;span class=&quot;string&quot;&gt;&amp;quot;123456789011123456789011&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ObjectId(&amp;quot;123456789011123456789011&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;提取 &lt;code&gt;ObjectId&lt;/code&gt; 的创建时间&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta prompt_&quot;&gt;test&amp;gt; &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;ObjectId(&lt;span class=&quot;string&quot;&gt;&amp;quot;123456789011123456789011&amp;quot;&lt;/span&gt;).getTimestamp()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ISODate(&amp;quot;1979-09-05T22:51:36.000Z&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="mongodb" scheme="https://yngty.github.io/categories/mongodb/"/>
    
    
    <category term="mongodb" scheme="https://yngty.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>mongodb 入门-索引</title>
    <link href="https://yngty.github.io/2023/08/26/mongodb/mongodb-%E5%85%A5%E9%97%A8-%E7%B4%A2%E5%BC%95/"/>
    <id>https://yngty.github.io/2023/08/26/mongodb/mongodb-%E5%85%A5%E9%97%A8-%E7%B4%A2%E5%BC%95/</id>
    <published>2023-08-26T14:30:06.000Z</published>
    <updated>2024-01-08T07:55:15.108Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;索引&quot;&gt;&lt;a href=&quot;#索引&quot; class=&quot;headerlink&quot; title=&quot;索引&quot;&gt;&lt;/a&gt;索引&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;对文档部分内容进行排序的数据结构&lt;/li&gt;
&lt;li&gt;加快文档查询和文档排序的速度&lt;/li&gt;
&lt;li&gt;复合键索引只能支持前缀子查询&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;索引操作&quot;&gt;&lt;a href=&quot;#索引操作&quot; class=&quot;headerlink&quot; title=&quot;索引操作&quot;&gt;&lt;/a&gt;索引操作&lt;/h2&gt;&lt;h3 id=&quot;创建索引&quot;&gt;&lt;a href=&quot;#创建索引&quot; class=&quot;headerlink&quot; title=&quot;创建索引&quot;&gt;&lt;/a&gt;创建索引&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;db.&amp;lt;collection&amp;gt;.createIndex(&amp;lt;keys&amp;gt;, &amp;lt;options&amp;gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;keys&amp;gt;&lt;/code&gt; 文档指定了创建索引的字段&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;options&amp;gt;&lt;/code&gt; 创建索引的参数和设定索引的特性&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;创建一个单键索引&quot;&gt;&lt;a href=&quot;#创建一个单键索引&quot; class=&quot;headerlink&quot; title=&quot;创建一个单键索引&quot;&gt;&lt;/a&gt;创建一个单键索引&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;db.accountWithIndex.createIndex(&amp;#123;name: 1&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;创建一个复合键索引&quot;&gt;&lt;a href=&quot;#创建一个复合键索引&quot; class=&quot;headerlink&quot; title=&quot;创建一个复合键索引&quot;&gt;&lt;/a&gt;创建一个复合键索引&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;db.accountWithIndex.createIndex(&amp;#123;name: 1, balance: -1&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;创建一个多键索引，创建在数组字段上-数组字段中的每一个元素都会在多键索引中创建一个键&quot;&gt;&lt;a href=&quot;#创建一个多键索引，创建在数组字段上-数组字段中的每一个元素都会在多键索引中创建一个键&quot; class=&quot;headerlink&quot; title=&quot;创建一个多键索引，创建在数组字段上, 数组字段中的每一个元素都会在多键索引中创建一个键&quot;&gt;&lt;/a&gt;创建一个多键索引，创建在数组字段上, 数组字段中的每一个元素都会在多键索引中创建一个键&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;db.accountWithIndex.createIndex(&amp;#123;currency: 1&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;列出集合中的索引&quot;&gt;&lt;a href=&quot;#列出集合中的索引&quot; class=&quot;headerlink&quot; title=&quot;列出集合中的索引&quot;&gt;&lt;/a&gt;列出集合中的索引&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;db.accountWithIndex.getIndexes()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="mongodb" scheme="https://yngty.github.io/categories/mongodb/"/>
    
    
    <category term="mongodb" scheme="https://yngty.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>@executable path, @load path 和 @rpath</title>
    <link href="https://yngty.github.io/2023/08/25/macos/executable-path-load-path-%E5%92%8C-rpath/"/>
    <id>https://yngty.github.io/2023/08/25/macos/executable-path-load-path-%E5%92%8C-rpath/</id>
    <published>2023-08-25T11:05:29.000Z</published>
    <updated>2024-01-08T07:55:15.104Z</updated>
    
    
    <summary type="html">&lt;p&gt;在 &lt;code&gt;macOS&lt;/code&gt; 上，动态链接器使用特定的路径变量来解析运行时的库位置。这些路径变量包括：绝对路径、 &lt;code&gt;@executable_path&lt;/code&gt;、&lt;code&gt;@loader_path&lt;/code&gt; 和 &lt;code&gt;@rpath&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&quot;绝对路径&quot;&gt;&lt;a href=&quot;#绝对路径&quot; class=&quot;headerlink&quot; title=&quot;绝对路径&quot;&gt;&lt;/a&gt;绝对路径&lt;/h1&gt;&lt;p&gt;对于安装在系统中共享位置的框架很有用，一般是 &lt;code&gt;/Library/Frameworks/xxx&lt;/code&gt;、 &lt;code&gt;/usr/lib/xxx&lt;/code&gt;, 但是查找嵌入在应用内部的动态库就很难使用，应用安装的位置都不固定，所以引出新的方式。&lt;/p&gt;
&lt;h1 id=&quot;executable-path&quot;&gt;&lt;a href=&quot;#executable-path&quot; class=&quot;headerlink&quot; title=&quot;@executable path&quot;&gt;&lt;/a&gt;@executable path&lt;/h1&gt;&lt;p&gt;&lt;code&gt;@executable_path&lt;/code&gt; 是用于指代&lt;strong&gt;当前正在执行的程序或应用的路径&lt;/strong&gt;。当你的应用程序或其动态库需要引用位于与可执行文件相同路径（或其子目录）下的其他动态库时，这会非常有用。&lt;/p&gt;</summary>
    
    
    
    <category term="MacOS" scheme="https://yngty.github.io/categories/MacOS/"/>
    
    
    <category term="DYLD" scheme="https://yngty.github.io/tags/DYLD/"/>
    
  </entry>
  
  <entry>
    <title>libevent 使用入门</title>
    <link href="https://yngty.github.io/2023/08/23/network/libevent-%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    <id>https://yngty.github.io/2023/08/23/network/libevent-%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/</id>
    <published>2023-08-23T10:07:43.000Z</published>
    <updated>2024-01-08T07:55:15.108Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;&lt;code&gt;libEvent&lt;/code&gt;,</summary>
        
      
    
    
    
    <category term="Network" scheme="https://yngty.github.io/categories/Network/"/>
    
    
    <category term="libevent" scheme="https://yngty.github.io/tags/libevent/"/>
    
  </entry>
  
  <entry>
    <title>I/O 多路复用</title>
    <link href="https://yngty.github.io/2023/08/17/network/I-O-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/"/>
    <id>https://yngty.github.io/2023/08/17/network/I-O-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</id>
    <published>2023-08-17T14:32:07.000Z</published>
    <updated>2024-01-08T07:55:15.108Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;select&quot;&gt;&lt;a href=&quot;#select&quot; class=&quot;headerlink&quot; title=&quot;select&quot;&gt;&lt;/a&gt;select&lt;/h1&gt;&lt;p&gt;&lt;code&gt;select&lt;/code&gt; 实现多路复用的方式是，将已连接的 &lt;code&gt;socket&lt;/code&gt; 都放到一个文件描述符集合，然后调用 &lt;code&gt;select&lt;/code&gt;函数将文件描述符集合拷贝到内核里，让内核来检查是否有网络事件产生，通过遍历文件描述符集合的方式，当检查到有事件产生后，将此 &lt;code&gt;socket&lt;/code&gt; 标记为可读或可写， 接着再把整个文件描述符集合拷贝回用户态里，然后用户态还需要再通过遍历的方法找到可读或可写的 &lt;code&gt;socket&lt;/code&gt;，然后再对其处理。&lt;/p&gt;
&lt;p&gt;所以，对于 &lt;code&gt;select&lt;/code&gt; 这种方式，需要进行 &lt;strong&gt;2 次「遍历」文件描述符集合&lt;/strong&gt;，一次是在内核态里，一个次是在用户态里 ，而且还会发生 &lt;strong&gt;2 次「拷贝」文件描述符集合&lt;/strong&gt;，先从用户空间传入内核空间，由内核修改后，再传出到用户空间中。&lt;/p&gt;
&lt;h2 id=&quot;select-函数原型&quot;&gt;&lt;a href=&quot;#select-函数原型&quot; class=&quot;headerlink&quot; title=&quot;select 函数原型&quot;&gt;&lt;/a&gt;select 函数原型&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/select.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; nfds, fd_set *&lt;span class=&quot;keyword&quot;&gt;restrict&lt;/span&gt; readfds, fd_set *&lt;span class=&quot;keyword&quot;&gt;restrict&lt;/span&gt; writefds, fd_set *&lt;span class=&quot;keyword&quot;&gt;restrict&lt;/span&gt; errorfds, &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; timeval *&lt;span class=&quot;keyword&quot;&gt;restrict&lt;/span&gt; timeout)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;返回值 &lt;ul&gt;
&lt;li&gt;若有就绪描述符则为其数目，若超时则为 &lt;code&gt;0&lt;/code&gt;，若出错则为 &lt;code&gt;-1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;参数&lt;ul&gt;
&lt;li&gt;&lt;code&gt;maxfd&lt;/code&gt;: 待测试的描述符基数，它的值是待测试的最大描述符加 &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readfds&lt;/code&gt;：读描述符集合&lt;/li&gt;
&lt;li&gt;&lt;code&gt;writefds&lt;/code&gt;：写描述符集合&lt;/li&gt;
&lt;li&gt;&lt;code&gt;errorfds&lt;/code&gt;：异常描述符集合&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timeout&lt;/code&gt;: 超时设置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Network" scheme="https://yngty.github.io/categories/Network/"/>
    
    
    <category term="socket" scheme="https://yngty.github.io/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>TCP 协议</title>
    <link href="https://yngty.github.io/2023/07/25/network/TCP-%E5%8D%8F%E8%AE%AE/"/>
    <id>https://yngty.github.io/2023/07/25/network/TCP-%E5%8D%8F%E8%AE%AE/</id>
    <published>2023-07-25T09:43:58.000Z</published>
    <updated>2024-01-08T07:55:15.108Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;TCP-基本认识&quot;&gt;&lt;a href=&quot;#TCP-基本认识&quot; class=&quot;headerlink&quot; title=&quot;TCP 基本认识&quot;&gt;&lt;/a&gt;&lt;code&gt;TCP&lt;/code&gt; 基本认识&lt;/h1&gt;&lt;p&gt;&lt;code&gt;TCP&lt;/code&gt; 是 &lt;strong&gt;面向连接的、可靠的、基于字节流&lt;/strong&gt;的传输层通信协议。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; 0                   1                   2                   3 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|          Source Port          |       Destination Port        |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                        Sequence Number                        |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                    Acknowledgment Number                      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|  Data |           |U|A|P|R|S|F|                               |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Offset| Reserved  |R|C|S|S|Y|I|            Window             |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|       |           |G|K|H|T|N|N|                               |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|           Checksum            |         Urgent Pointer        |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                    Options                    |    Padding    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                             data                              |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Network" scheme="https://yngty.github.io/categories/Network/"/>
    
    
    <category term="tcp" scheme="https://yngty.github.io/tags/tcp/"/>
    
  </entry>
  
  <entry>
    <title>如何正确使用TCP</title>
    <link href="https://yngty.github.io/2023/07/24/network/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8TCP/"/>
    <id>https://yngty.github.io/2023/07/24/network/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8TCP/</id>
    <published>2023-07-24T15:12:44.000Z</published>
    <updated>2024-01-08T07:55:15.108Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;SO-REUSEADDR&quot;&gt;&lt;a href=&quot;#SO-REUSEADDR&quot; class=&quot;headerlink&quot; title=&quot;SO_REUSEADDR&quot;&gt;&lt;/a&gt;SO_REUSEADDR&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TCP&lt;/code&gt; 服务器能够在杀掉或崩溃后快速重启&lt;/li&gt;
&lt;li&gt;也适用 &lt;code&gt;fork-per-connection&lt;/code&gt; 服务器模型。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; optval = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;setsockopt&lt;/span&gt;(sockfd, SOL_SOCKET, SO_REUSEADDR, &amp;amp;optval, &lt;span class=&quot;built_in&quot;&gt;sizeof&lt;/span&gt;(optval));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;忽略-SIGPIPE&quot;&gt;&lt;a href=&quot;#忽略-SIGPIPE&quot; class=&quot;headerlink&quot; title=&quot;忽略 SIGPIPE&quot;&gt;&lt;/a&gt;忽略 SIGPIPE&lt;/h1&gt;&lt;p&gt;程序向对方已经关闭的管道，写数据，会收到 &lt;code&gt;SIGPIPE&lt;/code&gt; 信号。&lt;code&gt;write&lt;/code&gt; 系统调用返回 &lt;code&gt;-1&lt;/code&gt;收到 &lt;code&gt;errono EPIPE&lt;/code&gt;。 &lt;code&gt;SIGPIPE&lt;/code&gt; 信号默认行为终止进程。我们应该忽略 &lt;code&gt;SIGPIPE&lt;/code&gt; 信号。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;signal&lt;/span&gt;(SIGPIPE, SIG_IGN) == SIG_ERR) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Network" scheme="https://yngty.github.io/categories/Network/"/>
    
    
    <category term="tcp" scheme="https://yngty.github.io/tags/tcp/"/>
    
  </entry>
  
  <entry>
    <title>socket 编程</title>
    <link href="https://yngty.github.io/2023/07/24/network/socket-%E7%BC%96%E7%A8%8B/"/>
    <id>https://yngty.github.io/2023/07/24/network/socket-%E7%BC%96%E7%A8%8B/</id>
    <published>2023-07-24T10:38:44.000Z</published>
    <updated>2024-01-08T07:55:15.108Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;1-socket地址结构&quot;&gt;&lt;a href=&quot;#1-socket地址结构&quot; class=&quot;headerlink&quot; title=&quot;1. socket地址结构&quot;&gt;&lt;/a&gt;1. socket地址结构&lt;/h1&gt;&lt;h2 id=&quot;sockaddr-in&quot;&gt;&lt;a href=&quot;#sockaddr-in&quot; class=&quot;headerlink&quot; title=&quot;sockaddr_in&quot;&gt;&lt;/a&gt;&lt;code&gt;sockaddr_in&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ipv4&lt;/code&gt; 协议的地址结构是 &lt;code&gt;sockaddr_in&lt;/code&gt;，&lt;code&gt;ipv6&lt;/code&gt; 的地址结构是&lt;code&gt;sockaddr_in6&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//#include&amp;lt;netinet/in.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sockaddr_in&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;sa_family_t&lt;/span&gt;     sin_family;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;in_port_t&lt;/span&gt;       sin_port;	    &lt;span class=&quot;comment&quot;&gt;/* Port number.  */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;in_addr&lt;/span&gt;  &lt;span class=&quot;title&quot;&gt;sin_addr&lt;/span&gt;;&lt;/span&gt;		&lt;span class=&quot;comment&quot;&gt;/* Internet address.  */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* Pad to size of `struct sockaddr&amp;#x27;.  */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; sin_zero[&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr) -&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            __SOCKADDR_COMMON_SIZE -&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;in_port_t&lt;/span&gt;) -&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; in_addr)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sin_family&lt;/code&gt;：表示地址簇，&lt;code&gt;ipv4: AF_INET, ipv6: AF_INET6&lt;/code&gt;，&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sin_port&lt;/code&gt;：16位的端口号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sin_addr&lt;/code&gt;：点分十进制。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;通用地址结构&quot;&gt;&lt;a href=&quot;#通用地址结构&quot; class=&quot;headerlink&quot; title=&quot;通用地址结构&quot;&gt;&lt;/a&gt;通用地址结构&lt;/h2&gt;&lt;p&gt;结构体是 &lt;code&gt;sockaddr&lt;/code&gt;，方便可以接受 &lt;code&gt;ipv4/ipv6&lt;/code&gt; 的地址结构。之所以采用 &lt;code&gt;sockaddr&lt;/code&gt;，而不采用 &lt;code&gt;void*&lt;/code&gt;  是因为 &lt;code&gt;BSD&lt;/code&gt; 设计套接字的时候大约是 &lt;code&gt;1982&lt;/code&gt; 年，那个时候的 &lt;code&gt;C&lt;/code&gt; 语言还没有&lt;code&gt;void *&lt;/code&gt; 的支持。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sockaddr&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;sa_family_t&lt;/span&gt;  sa_family;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt;         ss_data[&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;  &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Network" scheme="https://yngty.github.io/categories/Network/"/>
    
    
    <category term="socket" scheme="https://yngty.github.io/tags/socket/"/>
    
    <category term="tcp" scheme="https://yngty.github.io/tags/tcp/"/>
    
  </entry>
  
</feed>
