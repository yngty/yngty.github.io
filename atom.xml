<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Symbol Crash</title>
  
  <subtitle>不学无术</subtitle>
  <link href="https://yngty.github.io/atom.xml" rel="self"/>
  
  <link href="https://yngty.github.io/"/>
  <updated>2025-07-31T03:18:16.279Z</updated>
  <id>https://yngty.github.io/</id>
  
  <author>
    <name>yngty</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>macOS syscall hook</title>
    <link href="https://yngty.github.io/2025/07/08/macos/macOS-syscall-hook/"/>
    <id>https://yngty.github.io/2025/07/08/macos/macOS-syscall-hook/</id>
    <published>2025-07-08T09:45:24.000Z</published>
    <updated>2025-07-31T03:18:16.279Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;1-找到sysent&quot;&gt;&lt;a href=&quot;#1-找到sysent&quot; class=&quot;headerlink&quot; title=&quot;1. 找到sysent&quot;&gt;&lt;/a&gt;1. 找到sysent&lt;/h2&gt;&lt;h3 id=&quot;1-find-kernel-base&quot;&gt;&lt;a</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>macOS IOKit 驱动开发入门指南</title>
    <link href="https://yngty.github.io/2025/07/04/macos/macOS-IOKit-%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://yngty.github.io/2025/07/04/macos/macOS-IOKit-%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</id>
    <published>2025-07-04T17:36:58.000Z</published>
    <updated>2025-07-31T03:18:16.279Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;完整调用流程&quot;&gt;&lt;a href=&quot;#完整调用流程&quot; class=&quot;headerlink&quot; title=&quot;完整调用流程&quot;&gt;&lt;/a&gt;完整调用流程&lt;/h3&gt;&lt;pre class=&quot;mermaid&quot;&gt;sequenceDiagram
    participant</summary>
        
      
    
    
    
    <category term="MacOS" scheme="https://yngty.github.io/categories/MacOS/"/>
    
    
    <category term="macOS" scheme="https://yngty.github.io/tags/macOS/"/>
    
    <category term="IOKit" scheme="https://yngty.github.io/tags/IOKit/"/>
    
    <category term="驱动开发" scheme="https://yngty.github.io/tags/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    <category term="内核扩展" scheme="https://yngty.github.io/tags/%E5%86%85%E6%A0%B8%E6%89%A9%E5%B1%95/"/>
    
    <category term="Xcode" scheme="https://yngty.github.io/tags/Xcode/"/>
    
    <category term="kext" scheme="https://yngty.github.io/tags/kext/"/>
    
  </entry>
  
  <entry>
    <title>macOS 内核扩展编程初探</title>
    <link href="https://yngty.github.io/2025/06/04/macos/macOS-%E5%86%85%E6%A0%B8%E6%89%A9%E5%B1%95%E7%BC%96%E7%A8%8B%E5%88%9D%E6%8E%A2/"/>
    <id>https://yngty.github.io/2025/06/04/macos/macOS-%E5%86%85%E6%A0%B8%E6%89%A9%E5%B1%95%E7%BC%96%E7%A8%8B%E5%88%9D%E6%8E%A2/</id>
    <published>2025-06-04T14:41:04.000Z</published>
    <updated>2025-07-31T03:18:16.279Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是-macOS-内核扩展（KEXT）？&quot;&gt;&lt;a href=&quot;#什么是-macOS-内核扩展（KEXT）？&quot; class=&quot;headerlink&quot; title=&quot;什么是 macOS 内核扩展（KEXT）？&quot;&gt;&lt;/a&gt;什么是 macOS 内核扩展（KEXT）？&lt;/h2&gt;&lt;p&gt;&lt;code&gt;macOS&lt;/code&gt; 内核扩展是一种动态链接库（通常后缀为 &lt;code&gt;.kext&lt;/code&gt;），用于扩展 &lt;code&gt;XNU&lt;/code&gt; 内核的功能。&lt;code&gt;KEXT&lt;/code&gt; 可被用于编写驱动程序、系统安全模块、文件系统支持等底层功能。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;macOS Catalina（10.15）&lt;/code&gt;之后，&lt;code&gt;Apple&lt;/code&gt; 推出 &lt;code&gt;System Extensions&lt;/code&gt; 和 &lt;code&gt;DriverKit&lt;/code&gt;，逐步替代传统 &lt;code&gt;KEXT&lt;/code&gt;，但 &lt;code&gt;KEXT&lt;/code&gt; 仍广泛用于底层研究和安全相关开发。&lt;/p&gt;</summary>
    
    
    
    <category term="MacOS" scheme="https://yngty.github.io/categories/MacOS/"/>
    
    
    <category term="内核扩展" scheme="https://yngty.github.io/tags/%E5%86%85%E6%A0%B8%E6%89%A9%E5%B1%95/"/>
    
    <category term="KEXT" scheme="https://yngty.github.io/tags/KEXT/"/>
    
  </entry>
  
  <entry>
    <title>浏览器是如何知道网页证书被吊销的？</title>
    <link href="https://yngty.github.io/2025/05/30/network/certificate-revocation/"/>
    <id>https://yngty.github.io/2025/05/30/network/certificate-revocation/</id>
    <published>2025-05-30T14:59:11.000Z</published>
    <updated>2025-07-31T03:18:16.280Z</updated>
    
    
    <summary type="html">&lt;p&gt;在 &lt;code&gt;HTTPS&lt;/code&gt; 通信中，浏览器如何判断一个网页使用的证书是否已经 &lt;strong&gt;吊销&lt;/strong&gt;（&lt;code&gt;Revoked&lt;/code&gt;）？证书一旦吊销，就意味着它已不再可信，但如何通知用户浏览器，是一个非常关键的安全机制。&lt;/p&gt;
&lt;p&gt;本篇文章将全面梳理浏览器判断证书吊销状态的几种主流机制，及其优缺点和实际表现。&lt;/p&gt;</summary>
    
    
    
    <category term="网络安全" scheme="https://yngty.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="SSL/TLS" scheme="https://yngty.github.io/tags/SSL-TLS/"/>
    
    <category term="HTTPS" scheme="https://yngty.github.io/tags/HTTPS/"/>
    
    <category term="证书吊销" scheme="https://yngty.github.io/tags/%E8%AF%81%E4%B9%A6%E5%90%8A%E9%94%80/"/>
    
    <category term="浏览器安全" scheme="https://yngty.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>掌握 macOS 的 security 命令</title>
    <link href="https://yngty.github.io/2025/05/27/macos/%E6%8E%8C%E6%8F%A1-macOS-%E7%9A%84-security-%E5%91%BD%E4%BB%A4/"/>
    <id>https://yngty.github.io/2025/05/27/macos/%E6%8E%8C%E6%8F%A1-macOS-%E7%9A%84-security-%E5%91%BD%E4%BB%A4/</id>
    <published>2025-05-27T15:30:21.000Z</published>
    <updated>2025-07-31T03:18:16.279Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是-security？&quot;&gt;&lt;a href=&quot;#什么是-security？&quot; class=&quot;headerlink&quot; title=&quot;什么是 security？&quot;&gt;&lt;/a&gt;什么是 security？&lt;/h2&gt;&lt;p&gt;在 &lt;code&gt;macOS&lt;/code&gt; 系统中，&lt;code&gt;security&lt;/code&gt; 命令是一个强大的工具，可以让你管理密钥链（&lt;code&gt;Keychain&lt;/code&gt;）中的敏感信息，如密码、证书、私钥等。&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="MacOS" scheme="https://yngty.github.io/categories/MacOS/"/>
    
    
    <category term="Keychain" scheme="https://yngty.github.io/tags/Keychain/"/>
    
  </entry>
  
  <entry>
    <title>掌握 macOS 的 codesign 命令</title>
    <link href="https://yngty.github.io/2025/05/27/macos/%E6%8E%8C%E6%8F%A1-macOS-%E7%9A%84-codesign-%E5%91%BD%E4%BB%A4/"/>
    <id>https://yngty.github.io/2025/05/27/macos/%E6%8E%8C%E6%8F%A1-macOS-%E7%9A%84-codesign-%E5%91%BD%E4%BB%A4/</id>
    <published>2025-05-27T15:19:30.000Z</published>
    <updated>2025-07-31T03:18:16.279Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是-codesign？&quot;&gt;&lt;a href=&quot;#什么是-codesign？&quot; class=&quot;headerlink&quot; title=&quot;什么是 codesign？&quot;&gt;&lt;/a&gt;什么是 codesign？&lt;/h2&gt;&lt;p&gt;&lt;code&gt;codesign&lt;/code&gt; 是 &lt;code&gt;macOS&lt;/code&gt; 和 &lt;code&gt;iOS&lt;/code&gt; 开发中用于&lt;strong&gt;代码签名&lt;/strong&gt;的核心命令行工具，它确保应用程序的来源可信且未被篡改。无论是发布到 &lt;code&gt;App Store&lt;/code&gt; 还是独立分发，代码签名都是必经流程。&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="MacOS" scheme="https://yngty.github.io/categories/MacOS/"/>
    
    
    <category term="代码签名" scheme="https://yngty.github.io/tags/%E4%BB%A3%E7%A0%81%E7%AD%BE%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>深入理解 IP 协议</title>
    <link href="https://yngty.github.io/2025/05/27/network/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-IP%E5%8D%8F%E8%AE%AE/"/>
    <id>https://yngty.github.io/2025/05/27/network/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-IP%E5%8D%8F%E8%AE%AE/</id>
    <published>2025-05-27T13:56:43.000Z</published>
    <updated>2025-07-31T03:18:16.280Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;深入理解-IP-协议&quot;&gt;&lt;a href=&quot;#深入理解-IP-协议&quot; class=&quot;headerlink&quot; title=&quot;深入理解 IP 协议&quot;&gt;&lt;/a&gt;深入理解 IP 协议&lt;/h1&gt;&lt;h2 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1. 简介&quot;&gt;&lt;/a&gt;1. 简介&lt;/h2&gt;&lt;p&gt;&lt;code&gt;IP&lt;/code&gt; 协议（&lt;code&gt;Internet Protocol&lt;/code&gt;，互联网协议）是现代网络通信的基础。它定义了数据如何在网络中传输，并为不同的设备提供唯一的地址标识。&lt;code&gt;IP&lt;/code&gt; 协议是所有网络通信的核心，广泛应用于全球范围内的计算机网络、局域网（&lt;code&gt;LAN&lt;/code&gt;）以及广域网（&lt;code&gt;WAN&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;本文将详细探讨 &lt;code&gt;IP&lt;/code&gt; 协议的基础知识、工作原理、以及常见的版本（&lt;code&gt;IPv4&lt;/code&gt; 和 &lt;code&gt;IPv6&lt;/code&gt;）。&lt;/p&gt;</summary>
    
    
    
    <category term="Network" scheme="https://yngty.github.io/categories/Network/"/>
    
    
    <category term="网络协议" scheme="https://yngty.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
    <category term="网络" scheme="https://yngty.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="IP 协议" scheme="https://yngty.github.io/tags/IP-%E5%8D%8F%E8%AE%AE/"/>
    
    <category term="IPv4" scheme="https://yngty.github.io/tags/IPv4/"/>
    
    <category term="IPv6" scheme="https://yngty.github.io/tags/IPv6/"/>
    
  </entry>
  
  <entry>
    <title>深入理解 iptables：Linux 网络包过滤的核心机制</title>
    <link href="https://yngty.github.io/2025/05/26/linux/iptables-deep-dive/"/>
    <id>https://yngty.github.io/2025/05/26/linux/iptables-deep-dive/</id>
    <published>2025-05-26T10:00:00.000Z</published>
    <updated>2025-07-31T03:18:16.278Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;在 &lt;code&gt;Linux&lt;/code&gt; 网络安全与数据包处理领域，&lt;code&gt;iptables&lt;/code&gt; 是不可忽视的重要工具。它是 &lt;code&gt;Linux&lt;/code&gt; 系统上用于配置防火墙规则的用户空间工具，底层依赖内核模块 Netfilter 实现数据包的捕获与处理。&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Network" scheme="https://yngty.github.io/categories/Network/"/>
    
    <category term="网络安全" scheme="https://yngty.github.io/categories/Network/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="Linux 内核" scheme="https://yngty.github.io/categories/Network/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Linux-%E5%86%85%E6%A0%B8/"/>
    
    
    <category term="Linux" scheme="https://yngty.github.io/tags/Linux/"/>
    
    <category term="Netfilter" scheme="https://yngty.github.io/tags/Netfilter/"/>
    
    <category term="防火墙" scheme="https://yngty.github.io/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    
    <category term="网络安全" scheme="https://yngty.github.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="iptables" scheme="https://yngty.github.io/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>深入理解TUN与TAP：虚拟网络设备的原理与应用</title>
    <link href="https://yngty.github.io/2025/05/09/network/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3TUN%E4%B8%8ETAP%EF%BC%9A%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    <id>https://yngty.github.io/2025/05/09/network/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3TUN%E4%B8%8ETAP%EF%BC%9A%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/</id>
    <published>2025-05-09T17:20:28.000Z</published>
    <updated>2025-07-31T03:18:16.280Z</updated>
    
    
    <summary type="html">&lt;p&gt;在构建虚拟网络或实现VPN时，&lt;strong&gt;TUN&lt;/strong&gt;和&lt;strong&gt;TAP&lt;/strong&gt;是两个常被提及的虚拟网络设备。它们看似相似，却在网络协议栈的不同层级发挥作用。本文将深入解析它们的工作原理、应用场景及配置方法。&lt;/p&gt;</summary>
    
    
    
    <category term="网络虚拟化" scheme="https://yngty.github.io/categories/%E7%BD%91%E7%BB%9C%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
    <category term="TUN" scheme="https://yngty.github.io/tags/TUN/"/>
    
    <category term="TAP" scheme="https://yngty.github.io/tags/TAP/"/>
    
    <category term="VPN" scheme="https://yngty.github.io/tags/VPN/"/>
    
    <category term="虚拟机" scheme="https://yngty.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>SOCKS5 代理协议详解</title>
    <link href="https://yngty.github.io/2025/05/07/network/SOCKS5-%E4%BB%A3%E7%90%86%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/"/>
    <id>https://yngty.github.io/2025/05/07/network/SOCKS5-%E4%BB%A3%E7%90%86%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/</id>
    <published>2025-05-07T14:49:41.000Z</published>
    <updated>2025-07-31T03:18:16.280Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;SOCKS5-代理协议详解&quot;&gt;&lt;a href=&quot;#SOCKS5-代理协议详解&quot; class=&quot;headerlink&quot; title=&quot;SOCKS5 代理协议详解&quot;&gt;&lt;/a&gt;SOCKS5 代理协议详解&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;SOCKS5&lt;/strong&gt; 是一种网络代理协议，是 &lt;code&gt;SOCKS&lt;/code&gt; 协议的第五个版本, 它不仅支持传统的 &lt;code&gt;TCP&lt;/code&gt; 连接，还增加了对 &lt;code&gt;UDP&lt;/code&gt; 和多种认证方法的支持。&lt;code&gt;SOCKS5&lt;/code&gt; 工作在 &lt;code&gt;OSI&lt;/code&gt; 模型的&lt;strong&gt;会话层&lt;/strong&gt;，广泛用于突破网络限制、隐藏客户端真实 &lt;code&gt;IP&lt;/code&gt; 等场景。本文深入解析其协议字段、工作模式及认证机制。&lt;/p&gt;</summary>
    
    
    
    <category term="Network" scheme="https://yngty.github.io/categories/Network/"/>
    
    <category term="代理" scheme="https://yngty.github.io/categories/Network/%E4%BB%A3%E7%90%86/"/>
    
    
    <category term="SOCKS5" scheme="https://yngty.github.io/tags/SOCKS5/"/>
    
  </entry>
  
  <entry>
    <title>深入了解FTP协议：原理、命令与数据连接</title>
    <link href="https://yngty.github.io/2025/05/07/network/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3FTP%E5%8D%8F%E8%AE%AE%EF%BC%9A%E5%8E%9F%E7%90%86%E3%80%81%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%95%B0%E6%8D%AE%E8%BF%9E%E6%8E%A5/"/>
    <id>https://yngty.github.io/2025/05/07/network/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3FTP%E5%8D%8F%E8%AE%AE%EF%BC%9A%E5%8E%9F%E7%90%86%E3%80%81%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%95%B0%E6%8D%AE%E8%BF%9E%E6%8E%A5/</id>
    <published>2025-05-07T14:41:21.000Z</published>
    <updated>2025-07-31T03:18:16.280Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;深入了解FTP协议：原理、命令与数据连接&quot;&gt;&lt;a href=&quot;#深入了解FTP协议：原理、命令与数据连接&quot; class=&quot;headerlink&quot; title=&quot;深入了解FTP协议：原理、命令与数据连接&quot;&gt;&lt;/a&gt;深入了解FTP协议：原理、命令与数据连接&lt;/h1&gt;&lt;h2 id=&quot;什么是FTP协议？&quot;&gt;&lt;a href=&quot;#什么是FTP协议？&quot; class=&quot;headerlink&quot; title=&quot;什么是FTP协议？&quot;&gt;&lt;/a&gt;什么是FTP协议？&lt;/h2&gt;&lt;p&gt;&lt;code&gt;FTP（File Transfer Protocol）&lt;/code&gt; 是最常用的网络文件传输协议之一，允许计算机之间通过网络传输文件。它是一个基于客户端-服务器模型的协议，通过 &lt;code&gt;TCP&lt;/code&gt; 连接进行通信，通常运行在端口 &lt;code&gt;21&lt;/code&gt;。FTP主要支持两种模式：&lt;strong&gt;主动模式&lt;/strong&gt;和&lt;strong&gt;被动模式&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在本文中，我们将深入探讨 &lt;code&gt;FTP&lt;/code&gt; 协议的工作原理、常用命令、数据连接的处理方式以及两种模式的区别。&lt;/p&gt;</summary>
    
    
    
    <category term="Network" scheme="https://yngty.github.io/categories/Network/"/>
    
    
    <category term="网络协议" scheme="https://yngty.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
    <category term="FTP" scheme="https://yngty.github.io/tags/FTP/"/>
    
  </entry>
  
  <entry>
    <title>深入理解 HKDF：HMAC 密钥派生函数</title>
    <link href="https://yngty.github.io/2025/04/18/cryptographic/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-HKDF%EF%BC%9AHMAC-%E5%AF%86%E9%92%A5%E6%B4%BE%E7%94%9F%E5%87%BD%E6%95%B0/"/>
    <id>https://yngty.github.io/2025/04/18/cryptographic/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-HKDF%EF%BC%9AHMAC-%E5%AF%86%E9%92%A5%E6%B4%BE%E7%94%9F%E5%87%BD%E6%95%B0/</id>
    <published>2025-04-18T10:33:24.000Z</published>
    <updated>2025-07-31T03:18:16.277Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;在加密领域，密钥派生函数（&lt;code&gt;KDF&lt;/code&gt;）是通过从一个初始密钥（通常称为“种子密钥”或“主密钥”）生成多个密钥的算法。&lt;code&gt;HKDF（HMAC-based Key Derivation Function）&lt;/code&gt;是一种基于 &lt;code&gt;HMAC&lt;/code&gt; 的密钥派生函数，它被设计用于从一个或多个输入密钥材料中生成多个安全的输出密钥。&lt;code&gt;HKDF&lt;/code&gt; 是一个简洁且具有高度安全性的 &lt;code&gt;KDF&lt;/code&gt;，广泛用于生成加密协议中的密钥（如 &lt;code&gt;TLS&lt;/code&gt;、&lt;code&gt;IPSec&lt;/code&gt; 等）。&lt;/p&gt;
&lt;p&gt;在这篇文章中，我们将深入探讨 &lt;code&gt;HKDF&lt;/code&gt; 的原理、计算过程以及应用场景，帮助你更好地理解这个关键的密码学工具。&lt;/p&gt;</summary>
    
    
    
    <category term="Cryptographic Algorithms" scheme="https://yngty.github.io/categories/Cryptographic-Algorithms/"/>
    
    
    <category term="HMAC" scheme="https://yngty.github.io/tags/HMAC/"/>
    
    <category term="HKDF" scheme="https://yngty.github.io/tags/HKDF/"/>
    
  </entry>
  
  <entry>
    <title>HMAC：理解其原理和计算过程</title>
    <link href="https://yngty.github.io/2025/04/18/cryptographic/HMAC%EF%BC%9A%E7%90%86%E8%A7%A3%E5%85%B6%E5%8E%9F%E7%90%86%E5%92%8C%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B/"/>
    <id>https://yngty.github.io/2025/04/18/cryptographic/HMAC%EF%BC%9A%E7%90%86%E8%A7%A3%E5%85%B6%E5%8E%9F%E7%90%86%E5%92%8C%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B/</id>
    <published>2025-04-18T10:26:26.000Z</published>
    <updated>2025-07-31T03:18:16.276Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;HMAC（Hash-based Message Authentication Code&lt;/strong&gt;是一种基于哈希函数的消息认证码（&lt;code&gt;MAC&lt;/code&gt;）算法，用于验证数据的完整性和真实性。它通过结合哈希算法与密钥来生成一个认证码，可以防止数据在传输过程中被篡改。&lt;code&gt;HMAC&lt;/code&gt; 广泛应用于网络协议（如 &lt;code&gt;TLS&lt;/code&gt;、&lt;code&gt;IPSec&lt;/code&gt; 等）、数字签名以及 &lt;code&gt;API&lt;/code&gt; 认证等场景中。&lt;/p&gt;
&lt;p&gt;在这篇文章中，我们将深入了解 &lt;code&gt;HMAC&lt;/code&gt; 的原理，并通过具体的计算过程来说明其如何工作。&lt;/p&gt;</summary>
    
    
    
    <category term="Cryptographic Algorithms" scheme="https://yngty.github.io/categories/Cryptographic-Algorithms/"/>
    
    
    <category term="HMAC" scheme="https://yngty.github.io/tags/HMAC/"/>
    
  </entry>
  
  <entry>
    <title>TLS 1.2 与 TLS 1.3 握手流程深度解析：安全与性能的演进</title>
    <link href="https://yngty.github.io/2025/04/08/network/TLS/TLS-1-2-and-TLS-1-3-Handshake/"/>
    <id>https://yngty.github.io/2025/04/08/network/TLS/TLS-1-2-and-TLS-1-3-Handshake/</id>
    <published>2025-04-08T10:17:59.000Z</published>
    <updated>2025-07-31T03:18:16.280Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;TLS-1-2-与-TLS-1-3-握手流程深度解析：安全与性能的演进&quot;&gt;&lt;a href=&quot;#TLS-1-2-与-TLS-1-3-握手流程深度解析：安全与性能的演进&quot; class=&quot;headerlink&quot; title=&quot;TLS 1.2 与 TLS 1.3 握手流程深度解析：安全与性能的演进&quot;&gt;&lt;/a&gt;TLS 1.2 与 TLS 1.3 握手流程深度解析：安全与性能的演进&lt;/h1&gt;&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;TLS&lt;/code&gt;（传输层安全协议）是互联网加密通信的基石。从 &lt;code&gt;TLS 1.2&lt;/code&gt; 到 &lt;code&gt;TLS 1.3&lt;/code&gt;，协议在安全性和性能上实现了质的飞跃。本文将深入对比两者的握手流程，解析其设计差异，并探讨为何 &lt;code&gt;TLS 1.3&lt;/code&gt; 成为现代网络通信的首选。&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    
    <category term="SSL/TLS" scheme="https://yngty.github.io/tags/SSL-TLS/"/>
    
  </entry>
  
  <entry>
    <title>基础密码知识</title>
    <link href="https://yngty.github.io/2025/04/08/cryptographic/cryptographic_algorithms/"/>
    <id>https://yngty.github.io/2025/04/08/cryptographic/cryptographic_algorithms/</id>
    <published>2025-04-08T10:11:14.000Z</published>
    <updated>2025-07-31T03:18:16.277Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;常见加密模式&quot;&gt;&lt;a href=&quot;#常见加密模式&quot; class=&quot;headerlink&quot; title=&quot;常见加密模式&quot;&gt;&lt;/a&gt;常见加密模式&lt;/h1&gt;&lt;h2 id=&quot;为什么要分模式？&quot;&gt;&lt;a href=&quot;#为什么要分模式？&quot; class=&quot;headerlink&quot; title=&quot;为什么要分模式？&quot;&gt;&lt;/a&gt;为什么要分模式？&lt;/h2&gt;&lt;p&gt;对称加密算法（如&lt;code&gt;AES&lt;/code&gt;）只能加密&lt;strong&gt;固定长度&lt;/strong&gt;的数据块（比如 &lt;code&gt;AES&lt;/code&gt; 的块是 &lt;code&gt;128&lt;/code&gt; 位）。如果要加密一个很长的文件，就需要将文件切分成多个块，再逐个加密。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题来了&lt;/strong&gt;：如何让这些块之间产生关联，避免被破解？这就是&lt;strong&gt;加密模式&lt;/strong&gt;的作用！&lt;/p&gt;</summary>
    
    
    
    <category term="Cryptographic Algorithms" scheme="https://yngty.github.io/categories/Cryptographic-Algorithms/"/>
    
    
    <category term="密码" scheme="https://yngty.github.io/tags/%E5%AF%86%E7%A0%81/"/>
    
    <category term="加密" scheme="https://yngty.github.io/tags/%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Mac 终端设备控制</title>
    <link href="https://yngty.github.io/2025/02/24/macos/Mac-%E7%BB%88%E7%AB%AF%E8%AE%BE%E5%A4%87%E6%8E%A7%E5%88%B6/"/>
    <id>https://yngty.github.io/2025/02/24/macos/Mac-%E7%BB%88%E7%AB%AF%E8%AE%BE%E5%A4%87%E6%8E%A7%E5%88%B6/</id>
    <published>2025-02-24T14:05:09.000Z</published>
    <updated>2025-07-31T03:18:16.279Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;AirDrop&quot;&gt;&lt;a href=&quot;#AirDrop&quot; class=&quot;headerlink&quot; title=&quot;AirDrop&quot;&gt;&lt;/a&gt;AirDrop&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;打开  &lt;figure class=&quot;highlight</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MacOS文件监控</title>
    <link href="https://yngty.github.io/2024/10/25/macos/MacOS%E6%96%87%E4%BB%B6%E7%9B%91%E6%8E%A7/"/>
    <id>https://yngty.github.io/2024/10/25/macos/MacOS%E6%96%87%E4%BB%B6%E7%9B%91%E6%8E%A7/</id>
    <published>2024-10-25T10:25:38.000Z</published>
    <updated>2025-07-31T03:18:16.279Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;1-文件系统事件：文件变动的探测器&quot;&gt;&lt;a href=&quot;#1-文件系统事件：文件变动的探测器&quot; class=&quot;headerlink&quot; title=&quot;1. 文件系统事件：文件变动的探测器&quot;&gt;&lt;/a&gt;1. 文件系统事件：文件变动的探测器&lt;/h1&gt;&lt;p&gt;文件系统事件是macOS提供的一个API，可以帮助我们监听文件或目录的变更。只要文件或目录发生变化，这个API就会发出通知。&lt;/p&gt;</summary>
    
    
    
    <category term="macOS" scheme="https://yngty.github.io/categories/macOS/"/>
    
    
    <category term="macOS" scheme="https://yngty.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>Git 备忘录</title>
    <link href="https://yngty.github.io/2024/09/13/git/Git-%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <id>https://yngty.github.io/2024/09/13/git/Git-%E5%A4%87%E5%BF%98%E5%BD%95/</id>
    <published>2024-09-13T10:38:55.000Z</published>
    <updated>2025-07-31T03:18:16.278Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;如何修改-Git提交历史中的-author-等信息&quot;&gt;&lt;a href=&quot;#如何修改-Git提交历史中的-author-等信息&quot; class=&quot;headerlink&quot; title=&quot;如何修改 Git提交历史中的 author 等信息&quot;&gt;&lt;/a&gt;如何修改</summary>
        
      
    
    
    
    <category term="Git" scheme="https://yngty.github.io/categories/Git/"/>
    
    
    <category term="Git" scheme="https://yngty.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 代理原理</title>
    <link href="https://yngty.github.io/2024/07/22/network/HTTP-%E4%BB%A3%E7%90%86%E5%8E%9F%E7%90%86/"/>
    <id>https://yngty.github.io/2024/07/22/network/HTTP-%E4%BB%A3%E7%90%86%E5%8E%9F%E7%90%86/</id>
    <published>2024-07-22T14:49:00.000Z</published>
    <updated>2025-07-31T03:18:16.279Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;1-引言&quot;&gt;&lt;a href=&quot;#1-引言&quot; class=&quot;headerlink&quot; title=&quot;1. 引言&quot;&gt;&lt;/a&gt;1. 引言&lt;/h1&gt;&lt;p&gt;在网络通信中，&lt;code&gt;HTTP&lt;/code&gt;</summary>
        
      
    
    
    
    <category term="Network" scheme="https://yngty.github.io/categories/Network/"/>
    
    
    <category term="http" scheme="https://yngty.github.io/tags/http/"/>
    
    <category term="代理" scheme="https://yngty.github.io/tags/%E4%BB%A3%E7%90%86/"/>
    
    <category term="网络协议" scheme="https://yngty.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>译 SO_REUSEADDR 和 SO_REUSEPORT 有何不同？</title>
    <link href="https://yngty.github.io/2024/07/18/network/SO-REUSEADDR-%E5%92%8C-SO-REUSEPORT-%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C%EF%BC%9F/"/>
    <id>https://yngty.github.io/2024/07/18/network/SO-REUSEADDR-%E5%92%8C-SO-REUSEPORT-%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C%EF%BC%9F/</id>
    <published>2024-07-18T10:54:35.000Z</published>
    <updated>2025-07-31T03:18:16.280Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Socket-编程中的端口复用：SO-REUSEADDR-和-SO-REUSEPORT&quot;&gt;&lt;a href=&quot;#Socket-编程中的端口复用：SO-REUSEADDR-和-SO-REUSEPORT&quot; class=&quot;headerlink&quot; title=&quot;Socket 编程中的端口复用：SO_REUSEADDR 和 SO_REUSEPORT&quot;&gt;&lt;/a&gt;Socket 编程中的端口复用：SO_REUSEADDR 和 SO_REUSEPORT&lt;/h1&gt;&lt;p&gt;欢迎来到一个充满移植性挑战的世界！在深入分析这两个选项之前，我们首先需要了解 &lt;code&gt;BSD&lt;/code&gt; 套接字实现是所有套接字实现的鼻祖。几乎所有其他系统都在某个时间点复制了 &lt;code&gt;BSD&lt;/code&gt; 套接字实现，或至少是其接口，然后在此基础上发展演变。当然，&lt;code&gt;BSD&lt;/code&gt; 套接字实现本身也在不断演变，因此那些更晚期复制它的系统获得了更早期系统所缺乏的功能。理解 &lt;code&gt;BSD&lt;/code&gt; 套接字实现是理解其他所有套接字实现的关键，即使你不打算为 &lt;code&gt;BSD&lt;/code&gt; 系统编写代码，也应该了解它。&lt;/p&gt;
&lt;p&gt;在深入探讨 &lt;code&gt;SO_REUSEADDR&lt;/code&gt; 和 &lt;code&gt;SO_REUSEPORT&lt;/code&gt; 之前，你需要了解一些基本知识。一个 &lt;code&gt;TCP/UDP&lt;/code&gt; 连接由五个值组成的元组标识：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;lt;协议&amp;gt;, &amp;lt;源地址&amp;gt;, &amp;lt;源端口&amp;gt;, &amp;lt;目标地址&amp;gt;, &amp;lt;目标端口&amp;gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;任何唯一的这些值组合标识一个连接。因此，没有两个连接可以具有相同的五个值，否则系统将无法区分这些连接。&lt;/p&gt;
&lt;h2 id=&quot;套接字的基本操作&quot;&gt;&lt;a href=&quot;#套接字的基本操作&quot; class=&quot;headerlink&quot; title=&quot;套接字的基本操作&quot;&gt;&lt;/a&gt;套接字的基本操作&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;创建套接字：使用 &lt;code&gt;socket()&lt;/code&gt; 函数设置套接字的协议。&lt;/li&gt;
&lt;li&gt;绑定地址和端口：使用 &lt;code&gt;bind()&lt;/code&gt; 函数设置源地址和端口。&lt;/li&gt;
&lt;li&gt;连接目标地址和端口：使用 &lt;code&gt;connect()&lt;/code&gt; 函数设置目标地址和端口。&lt;br&gt;对于 &lt;code&gt;UDP&lt;/code&gt;，由于它是无连接协议，可以在不连接的情况下使用。然而，在某些情况下连接它是有益的。在无连接模式下，如果未显式绑定，&lt;code&gt;UDP&lt;/code&gt; 套接字通常会在第一次发送数据时由系统自动绑定，因为未绑定的 &lt;code&gt;UDP&lt;/code&gt; 套接字无法接收任何（回复）数据。对于未绑定的 TCP 套接字也是如此，它在连接之前会自动绑定。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Network" scheme="https://yngty.github.io/categories/Network/"/>
    
    
    <category term="tcp" scheme="https://yngty.github.io/tags/tcp/"/>
    
  </entry>
  
</feed>
