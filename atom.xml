<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>瓜地</title>
  
  <subtitle>不学无术</subtitle>
  <link href="https://yngty.github.io/atom.xml" rel="self"/>
  
  <link href="https://yngty.github.io/"/>
  <updated>2022-03-23T03:20:21.032Z</updated>
  <id>https://yngty.github.io/</id>
  
  <author>
    <name>yngty</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Effective C++ 20：传常量引用比传值更好</title>
    <link href="https://yngty.github.io/2022/03/23/effecitve-cpp/effective-cpp-20/"/>
    <id>https://yngty.github.io/2022/03/23/effecitve-cpp/effective-cpp-20/</id>
    <published>2022-03-23T10:29:27.000Z</published>
    <updated>2022-03-23T03:20:21.032Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 20: Prefer pass-by-reference-to-const to pass-by-value.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;缺省情况下&lt;code&gt;C++&lt;/code&gt; 用传值得方式(一个继承自&lt;code&gt;C&lt;/code&gt;的方式)传递对象至(或来自)函数。除非你另外指定，否则函数参数都是以实际实参的复件(副本)为初值，而调用端所获得的亦是函数返回值的一个复件。这些复件(副本)系由对象的&lt;code&gt;copy&lt;/code&gt;构造函数产出。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;尽量以传常量引用替换传值前者通常比较高效，并可避免切割问题 (&lt;code&gt;slicing problem&lt;/code&gt;)，但是内置类型和 &lt;code&gt;STL&lt;/code&gt; 迭代器，还是传值更加合适。&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;性能问题&quot;&gt;&lt;a href=&quot;#性能问题&quot; class=&quot;headerlink&quot; title=&quot;性能问题:&quot;&gt;&lt;/a&gt;性能问题:&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Person ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; -Person();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; address;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Student&lt;/span&gt;:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Person &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Student();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -Student();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; schoolName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;现在考虑以下代码，其中调用函数 &lt;code&gt;validateStudent&lt;/code&gt; ，后者需要一个 &lt;code&gt;Student&lt;/code&gt;&lt;br&gt;(&lt;code&gt;by value&lt;/code&gt;) 并返回它是否有效:&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;validateStudent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Student s)&lt;/span&gt;&lt;/span&gt;;           &lt;span class=&quot;comment&quot;&gt;// function taking a Student by value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Student plato;                             &lt;span class=&quot;comment&quot;&gt;// Plato studied under Socrates&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; platoIsOK = validateStudent(plato);   &lt;span class=&quot;comment&quot;&gt;// call the functio&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 21：需要返回对象时，不要返回引用</title>
    <link href="https://yngty.github.io/2022/03/23/effecitve-cpp/effective-cpp-21/"/>
    <id>https://yngty.github.io/2022/03/23/effecitve-cpp/effective-cpp-21/</id>
    <published>2022-03-23T02:43:36.000Z</published>
    <updated>2022-03-23T03:17:01.032Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Don’t to return a reference when you must return an object.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Item 20 中提到，多数情况下传引用比传值更好。但不要无脑追求这一点，一定不要返回空引用或指针。&lt;/p&gt;
&lt;p&gt;举个栗子：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Rational&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, d;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Raitonal(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; numerator=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; denominator=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 返回值为什么是const请参考Item 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;friend&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Rational &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;*(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Rational&amp;amp; lhs, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Rational&amp;amp; rhs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Rational a, b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Rational c = a*b;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个版本的 &lt;code&gt;operator*&lt;/code&gt; 返回的是一个实例，&lt;code&gt;a*b&lt;/code&gt;时便会调用&lt;code&gt;operator*()&lt;/code&gt;， 返回值被拷贝后用来初始化&lt;code&gt;c&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;不考虑编译器优化和 &lt;code&gt;C11&lt;/code&gt; 的 &lt;code&gt;move&lt;/code&gt; ,这个过程涉及到多个构造和析构过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;operator*&lt;/code&gt;调用结束前，返回值被拷贝，调用拷贝构造函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;operator*&lt;/code&gt;调用结束后，返回值被析构&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt; 被初始化，调用拷贝构造函数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们能否通过传递引用的方式来避免这些函数调用？这要求在函数中创建那个要被返回给调用者的对象，而函数只有两种办法来创建对象：在栈空间中创建、或者在堆中创建。&lt;/p&gt;</summary>
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>文件MIME类型</title>
    <link href="https://yngty.github.io/2021/11/23/linux/%E6%96%87%E4%BB%B6MIME%E7%B1%BB%E5%9E%8B/"/>
    <id>https://yngty.github.io/2021/11/23/linux/%E6%96%87%E4%BB%B6MIME%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-11-23T12:14:31.000Z</published>
    <updated>2021-11-23T13:01:39.959Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;什么是-MIME-类型？&quot;&gt;&lt;a href=&quot;#什么是-MIME-类型？&quot; class=&quot;headerlink&quot; title=&quot;什么是 MIME 类型？&quot;&gt;&lt;/a&gt;什么是 MIME 类型？&lt;/h1&gt;&lt;p&gt;&lt;code&gt;MIME&lt;/code&gt;（多用途 &lt;code&gt;Internet&lt;/code&gt; 邮件扩展）的类型来识别文件格式。 &lt;code&gt;MIME&lt;/code&gt; 类型构成了 &lt;code&gt;Internet&lt;/code&gt; 上对文件类型进行分类的标准方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MIME Type&lt;/code&gt;是用于描述文件的类型的一种表述方法，其将文件划分为多种类型，方便对其进行统一的管理。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MIME Type&lt;/code&gt;指定了文件的类型名称、描述、图标信息，同时通过与.desktop应用程序描述文件整合，指定了文件的打开方式。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://yngty.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://yngty.github.io/tags/Linux/"/>
    
    <category term="mime" scheme="https://yngty.github.io/tags/mime/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令之tr</title>
    <link href="https://yngty.github.io/2021/11/17/linux/Linux%E5%91%BD%E4%BB%A4%E4%B9%8Btr/"/>
    <id>https://yngty.github.io/2021/11/17/linux/Linux%E5%91%BD%E4%BB%A4%E4%B9%8Btr/</id>
    <published>2021-11-17T03:08:28.000Z</published>
    <updated>2021-11-17T05:11:41.987Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;Linux&lt;/code&gt; 中 &lt;code&gt;tr&lt;/code&gt; 命令用于转换或删除文件中的字符。&lt;/p&gt;
&lt;h3 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; tr [OPTION] SET1 [SET2]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;选项&quot;&gt;&lt;a href=&quot;#选项&quot; class=&quot;headerlink&quot; title=&quot;选项&quot;&gt;&lt;/a&gt;选项&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-c, --complerment：反选设定字符。也就是符合 SET1 的部份不做处理，不符合的剩余部份才进行转换;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-d, --delete：删除所有属于第一字符集的字符；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-s, --squeeze-repeats：把连续重复的字符以单独一个字符表示；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-t, --truncate-set1：先删除第一字符集较第二字符集多出的字符;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://yngty.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://yngty.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 19：设计 class 犹如设计 type</title>
    <link href="https://yngty.github.io/2021/11/11/effecitve-cpp/effective-cpp-19/"/>
    <id>https://yngty.github.io/2021/11/11/effecitve-cpp/effective-cpp-19/</id>
    <published>2021-11-11T08:36:55.000Z</published>
    <updated>2021-11-15T04:55:20.253Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 19: Teat class design as type</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>C++ 中 malloc 和 new 的区别</title>
    <link href="https://yngty.github.io/2021/11/08/c++/C-%E4%B8%ADmalloc%E5%92%8Cnew%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://yngty.github.io/2021/11/08/c++/C-%E4%B8%ADmalloc%E5%92%8Cnew%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2021-11-08T14:44:44.000Z</published>
    <updated>2021-11-08T15:18:56.769Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;特征&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;new&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;malloc&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td</summary>
        
      
    
    
    
    <category term="C/C++" scheme="https://yngty.github.io/categories/C-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 18：让接口容易被正确使用，不易被误用</title>
    <link href="https://yngty.github.io/2021/11/08/effecitve-cpp/effective-cpp-18/"/>
    <id>https://yngty.github.io/2021/11/08/effecitve-cpp/effective-cpp-18/</id>
    <published>2021-11-08T07:48:13.000Z</published>
    <updated>2021-11-08T07:50:34.187Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 18: Make interfaces easy to use correctly and hard to use</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 17：在单独的语句中将 new 的对象放入智能指针</title>
    <link href="https://yngty.github.io/2021/11/08/effecitve-cpp/effective-cpp-17/"/>
    <id>https://yngty.github.io/2021/11/08/effecitve-cpp/effective-cpp-17/</id>
    <published>2021-11-08T01:53:13.000Z</published>
    <updated>2021-11-08T02:11:23.841Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 17: Store newed objects in smart pointers in standalone statements.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;以单独的语句将</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 16：使用同样的形式来new和delete</title>
    <link href="https://yngty.github.io/2021/11/08/effecitve-cpp/effective-cpp-16/"/>
    <id>https://yngty.github.io/2021/11/08/effecitve-cpp/effective-cpp-16/</id>
    <published>2021-11-08T01:23:53.000Z</published>
    <updated>2021-11-08T02:12:52.725Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 16: Use the same form in corresponding uses of new and delete.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;如果你用 &lt;code&gt;new&lt;/code&gt;</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 15：在资源管理类中提供对原始资源的访问</title>
    <link href="https://yngty.github.io/2021/11/05/effecitve-cpp/effective-cpp-15/"/>
    <id>https://yngty.github.io/2021/11/05/effecitve-cpp/effective-cpp-15/</id>
    <published>2021-11-05T07:58:35.000Z</published>
    <updated>2021-11-08T01:19:40.600Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 15: Provide access to raw resources in resource-managing classes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;APIs&lt;/code&gt;</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 14：在资源管理类中小心 copying 行为</title>
    <link href="https://yngty.github.io/2021/11/04/effecitve-cpp/effective-cpp-14/"/>
    <id>https://yngty.github.io/2021/11/04/effecitve-cpp/effective-cpp-14/</id>
    <published>2021-11-04T16:00:01.000Z</published>
    <updated>2021-11-04T16:33:29.494Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 14: Think carefully about copying behavior in resource-managing classes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;设计一个</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 13：以对象管理资源</title>
    <link href="https://yngty.github.io/2021/11/02/effecitve-cpp/effective-cpp-13/"/>
    <id>https://yngty.github.io/2021/11/02/effecitve-cpp/effective-cpp-13/</id>
    <published>2021-11-02T12:30:45.000Z</published>
    <updated>2021-11-02T12:32:55.585Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 13: Use objects to manage</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 12：复制对象时勿忘其每一个成分</title>
    <link href="https://yngty.github.io/2021/11/02/effecitve-cpp/effective-cpp-12/"/>
    <id>https://yngty.github.io/2021/11/02/effecitve-cpp/effective-cpp-12/</id>
    <published>2021-11-02T09:36:33.000Z</published>
    <updated>2021-11-02T09:45:34.385Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 12: Copy all parts of an object&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;正确拷贝函数实现：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 11：赋值运算符需要考虑自我赋值问题</title>
    <link href="https://yngty.github.io/2021/11/01/effecitve-cpp/effective-cpp-11/"/>
    <id>https://yngty.github.io/2021/11/01/effecitve-cpp/effective-cpp-11/</id>
    <published>2021-11-01T05:12:55.000Z</published>
    <updated>2021-11-02T08:59:39.536Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 11: Handle assignment to self in</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 10：赋值运算符要返回自己的引用</title>
    <link href="https://yngty.github.io/2021/11/01/effecitve-cpp/effective-cpp-10/"/>
    <id>https://yngty.github.io/2021/11/01/effecitve-cpp/effective-cpp-10/</id>
    <published>2021-11-01T04:59:28.000Z</published>
    <updated>2021-11-01T05:05:33.855Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 10：Have assignment operators return a reference to</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 9：绝不在构造和析构过程中调用 virtual 函数</title>
    <link href="https://yngty.github.io/2021/11/01/effecitve-cpp/effective-cpp-9/"/>
    <id>https://yngty.github.io/2021/11/01/effecitve-cpp/effective-cpp-9/</id>
    <published>2021-11-01T04:03:51.000Z</published>
    <updated>2021-11-01T04:57:51.747Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 9: Never call virtual functions during construction or destruction.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在构造和析构期间不要调用</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 8：析构函数不要抛出异常</title>
    <link href="https://yngty.github.io/2021/10/25/effecitve-cpp/effective-cpp-8/"/>
    <id>https://yngty.github.io/2021/10/25/effecitve-cpp/effective-cpp-8/</id>
    <published>2021-10-25T05:29:41.000Z</published>
    <updated>2021-11-01T04:04:20.395Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 8: Prevent exceptions from leaving destructors.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;C++&lt;/code&gt;</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 7：为多态基类声明 virtual 析构函数</title>
    <link href="https://yngty.github.io/2021/10/25/effecitve-cpp/effective-cpp-7/"/>
    <id>https://yngty.github.io/2021/10/25/effecitve-cpp/effective-cpp-7/</id>
    <published>2021-10-25T05:09:45.000Z</published>
    <updated>2021-10-25T08:28:07.665Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 7: Declare destructors virtual in polymorphic base</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 6：若不想使用编译器自动生成的函数，就该明确拒绝</title>
    <link href="https://yngty.github.io/2021/10/25/effecitve-cpp/effective-cpp-6/"/>
    <id>https://yngty.github.io/2021/10/25/effecitve-cpp/effective-cpp-6/</id>
    <published>2021-10-25T03:32:26.000Z</published>
    <updated>2022-03-23T02:21:09.505Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 6: Explicitly disallow the use of compiler-generated functions you do not</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 5：了解c++默默编写并调用哪些函数</title>
    <link href="https://yngty.github.io/2021/10/24/effecitve-cpp/effective-cpp-5/"/>
    <id>https://yngty.github.io/2021/10/24/effecitve-cpp/effective-cpp-5/</id>
    <published>2021-10-24T12:17:05.000Z</published>
    <updated>2021-10-24T12:47:55.753Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 5: Know what functions C++ silently writes and calls&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;默认函数&quot;&gt;&lt;a href=&quot;#默认函数&quot;</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
</feed>
