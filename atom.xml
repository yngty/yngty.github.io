<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>瓜地</title>
  
  <subtitle>不学无术</subtitle>
  <link href="https://yngty.github.io/atom.xml" rel="self"/>
  
  <link href="https://yngty.github.io/"/>
  <updated>2021-11-02T09:01:07.112Z</updated>
  <id>https://yngty.github.io/</id>
  
  <author>
    <name>yngty</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Effective C++ 11：赋值运算符需要考虑自我赋值问题</title>
    <link href="https://yngty.github.io/2021/11/01/effective-cpp-11/"/>
    <id>https://yngty.github.io/2021/11/01/effective-cpp-11/</id>
    <published>2021-11-01T13:12:55.000Z</published>
    <updated>2021-11-02T09:01:07.112Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 11: Handle assignment to self in</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 10：赋值运算符要返回自己的引用</title>
    <link href="https://yngty.github.io/2021/11/01/effective-cpp-10/"/>
    <id>https://yngty.github.io/2021/11/01/effective-cpp-10/</id>
    <published>2021-11-01T12:59:28.000Z</published>
    <updated>2021-11-02T09:01:07.112Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 10：Have assignment operators return a reference to</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 9：绝不在构造和析构过程中调用 virtual 函数</title>
    <link href="https://yngty.github.io/2021/11/01/effective-cpp-9/"/>
    <id>https://yngty.github.io/2021/11/01/effective-cpp-9/</id>
    <published>2021-11-01T12:03:51.000Z</published>
    <updated>2021-11-02T09:01:07.112Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 9: Never call virtual functions during construction or destruction.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在构造和析构期间不要调用</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 8：析构函数不要抛出异常</title>
    <link href="https://yngty.github.io/2021/10/25/effective-cpp-8/"/>
    <id>https://yngty.github.io/2021/10/25/effective-cpp-8/</id>
    <published>2021-10-25T05:29:41.000Z</published>
    <updated>2021-11-01T04:04:20.395Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 8: Prevent exceptions from leaving destructors.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;C++&lt;/code&gt;</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 7：为多态基类声明 virtual 析构函数</title>
    <link href="https://yngty.github.io/2021/10/25/effective-cpp-7/"/>
    <id>https://yngty.github.io/2021/10/25/effective-cpp-7/</id>
    <published>2021-10-25T05:09:45.000Z</published>
    <updated>2021-10-25T08:28:07.665Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 7: Declare destructors virtual in polymorphic base</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 6：若不想使用编译器自动生成的函数，就该明确拒绝</title>
    <link href="https://yngty.github.io/2021/10/25/effective-cpp-6/"/>
    <id>https://yngty.github.io/2021/10/25/effective-cpp-6/</id>
    <published>2021-10-25T03:32:26.000Z</published>
    <updated>2021-10-25T03:58:31.727Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 6: Explicitly disallow the use of compiler-generated functions you do not</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 5：了解c++默默编写并调用哪些函数</title>
    <link href="https://yngty.github.io/2021/10/24/effective-cpp-5/"/>
    <id>https://yngty.github.io/2021/10/24/effective-cpp-5/</id>
    <published>2021-10-24T12:17:05.000Z</published>
    <updated>2021-10-24T12:47:55.753Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 5: Know what functions C++ silently writes and calls&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;默认函数&quot;&gt;&lt;a href=&quot;#默认函数&quot;</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 4：确定对象被使用前已先被初始化</title>
    <link href="https://yngty.github.io/2021/01/13/effective-cpp-4/"/>
    <id>https://yngty.github.io/2021/01/13/effective-cpp-4/</id>
    <published>2021-01-13T14:41:25.000Z</published>
    <updated>2021-10-24T12:19:49.547Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 4: Make sure that objects are initialized before they’re used.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;手工初始化内置对象&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 3：尽可能使用 const</title>
    <link href="https://yngty.github.io/2021/01/05/effective-cpp-3/"/>
    <id>https://yngty.github.io/2021/01/05/effective-cpp-3/</id>
    <published>2021-01-05T14:04:32.000Z</published>
    <updated>2021-10-22T01:48:24.041Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item3: Use const whenever possible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;常量的声明&quot;&gt;&lt;a href=&quot;#常量的声明&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 2：尽量以const, enum, inline 替换 &amp;#35;define</title>
    <link href="https://yngty.github.io/2020/12/14/effective-cpp-2/"/>
    <id>https://yngty.github.io/2020/12/14/effective-cpp-2/</id>
    <published>2020-12-14T04:36:49.000Z</published>
    <updated>2021-10-22T01:48:24.041Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 2: Prefer consts, enums, and inlines to #defines&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们先看看&lt;code&gt;#deifne&lt;/code&gt; 有哪些的问题:&lt;/p&gt;
&lt;h1</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 1：将C++视作一系列的语言</title>
    <link href="https://yngty.github.io/2020/12/07/effective-cpp-1/"/>
    <id>https://yngty.github.io/2020/12/07/effective-cpp-1/</id>
    <published>2020-12-07T12:40:56.000Z</published>
    <updated>2021-10-22T01:48:24.041Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 1: View C++ as a federation of languages&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一开始，&lt;code&gt;Ｃ++&lt;/code&gt; 只是 &lt;code&gt;Ｃ&lt;/code&gt;</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
  </entry>
  
</feed>
