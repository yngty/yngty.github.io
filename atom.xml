<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>瓜地</title>
  
  <subtitle>不学无术</subtitle>
  <link href="https://yngty.github.io/atom.xml" rel="self"/>
  
  <link href="https://yngty.github.io/"/>
  <updated>2022-04-15T03:12:09.354Z</updated>
  <id>https://yngty.github.io/</id>
  
  <author>
    <name>yngty</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Effective C++ 26：尽可能推迟变量的定义</title>
    <link href="https://yngty.github.io/2022/04/15/effecitve-cpp/effective-cpp-26/"/>
    <id>https://yngty.github.io/2022/04/15/effecitve-cpp/effective-cpp-26/</id>
    <published>2022-04-15T10:38:20.000Z</published>
    <updated>2022-04-15T03:12:09.354Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 26:Postpone variable definitions as long as possible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;推迟变量的定义有两个好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;改善程序效率，减少无用的构造和析构。&lt;/li&gt;
&lt;li&gt;增加程序流程清晰度。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这条规则看似简单，但存在流程控制语句的时候容易疏忽。如：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;encryptPassword&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;amp; password)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; encrypted;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (password.length() &amp;lt; MinimumPasswordLength) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; logic_error(&lt;span class=&quot;string&quot;&gt;&amp;quot;Password is too short&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    encrypted = password;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    encrypt(encrypted);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; encrypted;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 25：设计一个不抛异常的 swap 函数</title>
    <link href="https://yngty.github.io/2022/04/09/effecitve-cpp/effective-cpp-25/"/>
    <id>https://yngty.github.io/2022/04/09/effecitve-cpp/effective-cpp-25/</id>
    <published>2022-04-09T23:12:46.000Z</published>
    <updated>2022-04-15T03:12:09.354Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Consider support for a non-throwing swap.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;swap&lt;/code&gt;</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 24：若所有参数皆需类型转换，请采用非成员函数</title>
    <link href="https://yngty.github.io/2022/04/09/effecitve-cpp/effective-cpp-24/"/>
    <id>https://yngty.github.io/2022/04/09/effecitve-cpp/effective-cpp-24/</id>
    <published>2022-04-09T22:39:25.000Z</published>
    <updated>2022-04-15T03:12:09.354Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Declare non-member functions when type conversions should apply all parameters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;令 &lt;code&gt;classes&lt;/code&gt; 支持隐式转换通常是糟糕的设计，但也有例外，最常见的是在建立数值类型时。 比如设计一个有理数 &lt;code&gt;class&lt;/code&gt; 允许整数隐式转换。&lt;/p&gt;</summary>
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 23：用非成员函数、非友元函数替换成员函数</title>
    <link href="https://yngty.github.io/2022/04/09/effecitve-cpp/effective-cpp-23/"/>
    <id>https://yngty.github.io/2022/04/09/effecitve-cpp/effective-cpp-23/</id>
    <published>2022-04-09T22:30:35.000Z</published>
    <updated>2022-04-15T03:12:09.354Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Prefer non-member non-friend functions to member</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>在UOS中文件管理器匿名访问共享修改文件导致文件变成只读根因分析报告</title>
    <link href="https://yngty.github.io/2022/03/23/linux/%E5%9C%A8UOS%E4%B8%AD%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8%E5%8C%BF%E5%90%8D%E8%AE%BF%E9%97%AE%E5%85%B1%E4%BA%AB%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E6%9B%B4%E6%94%B9%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/"/>
    <id>https://yngty.github.io/2022/03/23/linux/%E5%9C%A8UOS%E4%B8%AD%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8%E5%8C%BF%E5%90%8D%E8%AE%BF%E9%97%AE%E5%85%B1%E4%BA%AB%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E6%9B%B4%E6%94%B9%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/</id>
    <published>2022-03-23T13:30:28.000Z</published>
    <updated>2022-04-15T03:12:09.358Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;在UOS中文件管理器匿名访问共享修改文件导致文件变成只读根因分析报告&quot;&gt;&lt;a href=&quot;#在UOS中文件管理器匿名访问共享修改文件导致文件变成只读根因分析报告&quot; class=&quot;headerlink&quot; title=&quot;在UOS中文件管理器匿名访问共享修改文件导致文件变成只读根因分析报告&quot;&gt;&lt;/a&gt;在UOS中文件管理器匿名访问共享修改文件导致文件变成只读根因分析报告&lt;/h1&gt;&lt;h2 id=&quot;一、相关术语&quot;&gt;&lt;a href=&quot;#一、相关术语&quot; class=&quot;headerlink&quot; title=&quot;一、相关术语&quot;&gt;&lt;/a&gt;一、相关术语&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;缩写&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;全称&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;code&gt;Samba&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;code&gt;Samba&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Samba是在Linux和UNIX系统上实现SMB协议的一个免费软件，由服务器及客户端程序构成。SMB（Server Messages Block，信息服务块）是一种在局域网上共享文件和打印机的一种通信协议，它为局域网内的不同计算机之间提供文件及打印机等资源的共享服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;code&gt;GVFS&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;code&gt;GNOME Virtual file system&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;code&gt;GVFS&lt;/code&gt; 是 &lt;code&gt;GNOME&lt;/code&gt; 桌面系统的虚拟文件系统，通过 &lt;code&gt;GVFS&lt;/code&gt; ，用户可以很容易的通过 &lt;code&gt;SFTP&lt;/code&gt;、&lt;code&gt;FTP&lt;/code&gt;、&lt;code&gt;WebDAV&lt;/code&gt;、&lt;code&gt;SMB&lt;/code&gt;等访问远程数据，通过 &lt;code&gt;HAL integration&lt;/code&gt;、&lt;code&gt;OBEX&lt;/code&gt; 等访问本地数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;code&gt;GIO&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;code&gt;GIO&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;作为 &lt;code&gt;GLIB&lt;/code&gt; 的一部分的新共享库，提供了针对 &lt;code&gt;GVFS&lt;/code&gt; 的 &lt;code&gt;API&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;二、问题概述&quot;&gt;&lt;a href=&quot;#二、问题概述&quot; class=&quot;headerlink&quot; title=&quot;二、问题概述&quot;&gt;&lt;/a&gt;二、问题概述&lt;/h2&gt;&lt;p&gt;【复现步骤】&lt;/p&gt;
&lt;p&gt;1、&lt;code&gt;用户A&lt;/code&gt; 在uos系统中准备一个包含文件的文件夹，并且&lt;code&gt;用户A&lt;/code&gt; 对文件和文件夹具有可读可写权限。&lt;/p&gt;
&lt;p&gt;2、&lt;code&gt;用户A&lt;/code&gt; 通过文件管理器共享准备好的文件夹，并设置允许匿名访问。&lt;/p&gt;
&lt;p&gt;3、&lt;code&gt;用户B&lt;/code&gt; 通过文件管理器匿名访问这个共享文件夹并且修改共享目录中的文件。&lt;/p&gt;
&lt;p&gt;4、修改的共享文件变为了只读，&lt;code&gt;用户 A&lt;/code&gt; 无法再修改。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://yngty.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://yngty.github.io/tags/Linux/"/>
    
    <category term="UOS" scheme="https://yngty.github.io/tags/UOS/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 22：将成员变量声明为private</title>
    <link href="https://yngty.github.io/2022/03/23/effecitve-cpp/effective-cpp-22/"/>
    <id>https://yngty.github.io/2022/03/23/effecitve-cpp/effective-cpp-22/</id>
    <published>2022-03-23T03:22:04.000Z</published>
    <updated>2022-03-23T05:18:17.192Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Declare data members</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 21：需要返回对象时，不要返回引用</title>
    <link href="https://yngty.github.io/2022/03/23/effecitve-cpp/effective-cpp-21/"/>
    <id>https://yngty.github.io/2022/03/23/effecitve-cpp/effective-cpp-21/</id>
    <published>2022-03-23T02:43:36.000Z</published>
    <updated>2022-03-23T05:17:48.757Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Don’t to return a reference when you must return an object.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Item 20 中提到，多数情况下传引用比传值更好。但不要无脑追求这一点，一定不要返回空引用或指针。&lt;/p&gt;</summary>
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 20：传常量引用比传值更好</title>
    <link href="https://yngty.github.io/2022/03/23/effecitve-cpp/effective-cpp-20/"/>
    <id>https://yngty.github.io/2022/03/23/effecitve-cpp/effective-cpp-20/</id>
    <published>2022-03-23T02:29:27.000Z</published>
    <updated>2022-03-23T05:18:00.297Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 20: Prefer pass-by-reference-to-const to pass-by-value.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;缺省情况下&lt;code&gt;C++&lt;/code&gt; 用传值得方式(一个继承自&lt;code&gt;C&lt;/code&gt;的方式)传递对象至(或来自)函数。除非你另外指定，否则函数参数都是以实际实参的复件(副本)为初值，而调用端所获得的亦是函数返回值的一个复件。这些复件(副本)系由对象的&lt;code&gt;copy&lt;/code&gt;构造函数产出。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;尽量以传常量引用替换传值前者通常比较高效，并可避免切割问题 (&lt;code&gt;slicing problem&lt;/code&gt;)，但是内置类型和 &lt;code&gt;STL&lt;/code&gt; 迭代器，还是传值更加合适。&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>文件MIME类型</title>
    <link href="https://yngty.github.io/2021/11/23/linux/%E6%96%87%E4%BB%B6MIME%E7%B1%BB%E5%9E%8B/"/>
    <id>https://yngty.github.io/2021/11/23/linux/%E6%96%87%E4%BB%B6MIME%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-11-23T12:14:31.000Z</published>
    <updated>2021-11-23T13:01:39.959Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;什么是-MIME-类型？&quot;&gt;&lt;a href=&quot;#什么是-MIME-类型？&quot; class=&quot;headerlink&quot; title=&quot;什么是 MIME 类型？&quot;&gt;&lt;/a&gt;什么是 MIME 类型？&lt;/h1&gt;&lt;p&gt;&lt;code&gt;MIME&lt;/code&gt;（多用途 &lt;code&gt;Internet&lt;/code&gt; 邮件扩展）的类型来识别文件格式。 &lt;code&gt;MIME&lt;/code&gt; 类型构成了 &lt;code&gt;Internet&lt;/code&gt; 上对文件类型进行分类的标准方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MIME Type&lt;/code&gt;是用于描述文件的类型的一种表述方法，其将文件划分为多种类型，方便对其进行统一的管理。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MIME Type&lt;/code&gt;指定了文件的类型名称、描述、图标信息，同时通过与.desktop应用程序描述文件整合，指定了文件的打开方式。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://yngty.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://yngty.github.io/tags/Linux/"/>
    
    <category term="mime" scheme="https://yngty.github.io/tags/mime/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令之tr</title>
    <link href="https://yngty.github.io/2021/11/17/linux/Linux%E5%91%BD%E4%BB%A4%E4%B9%8Btr/"/>
    <id>https://yngty.github.io/2021/11/17/linux/Linux%E5%91%BD%E4%BB%A4%E4%B9%8Btr/</id>
    <published>2021-11-17T03:08:28.000Z</published>
    <updated>2021-11-17T05:11:41.987Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;Linux&lt;/code&gt; 中 &lt;code&gt;tr&lt;/code&gt; 命令用于转换或删除文件中的字符。&lt;/p&gt;
&lt;h3 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; tr [OPTION] SET1 [SET2]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;选项&quot;&gt;&lt;a href=&quot;#选项&quot; class=&quot;headerlink&quot; title=&quot;选项&quot;&gt;&lt;/a&gt;选项&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-c, --complerment：反选设定字符。也就是符合 SET1 的部份不做处理，不符合的剩余部份才进行转换;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-d, --delete：删除所有属于第一字符集的字符；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-s, --squeeze-repeats：把连续重复的字符以单独一个字符表示；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-t, --truncate-set1：先删除第一字符集较第二字符集多出的字符;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://yngty.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://yngty.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 19：设计 class 犹如设计 type</title>
    <link href="https://yngty.github.io/2021/11/11/effecitve-cpp/effective-cpp-19/"/>
    <id>https://yngty.github.io/2021/11/11/effecitve-cpp/effective-cpp-19/</id>
    <published>2021-11-11T08:36:55.000Z</published>
    <updated>2021-11-15T04:55:20.253Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 19: Teat class design as type</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>C++ 中 malloc 和 new 的区别</title>
    <link href="https://yngty.github.io/2021/11/08/c++/C-%E4%B8%ADmalloc%E5%92%8Cnew%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://yngty.github.io/2021/11/08/c++/C-%E4%B8%ADmalloc%E5%92%8Cnew%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2021-11-08T14:44:44.000Z</published>
    <updated>2021-11-08T15:18:56.769Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;特征&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;new&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;malloc&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td</summary>
        
      
    
    
    
    <category term="C/C++" scheme="https://yngty.github.io/categories/C-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 18：让接口容易被正确使用，不易被误用</title>
    <link href="https://yngty.github.io/2021/11/08/effecitve-cpp/effective-cpp-18/"/>
    <id>https://yngty.github.io/2021/11/08/effecitve-cpp/effective-cpp-18/</id>
    <published>2021-11-08T07:48:13.000Z</published>
    <updated>2021-11-08T07:50:34.187Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 18: Make interfaces easy to use correctly and hard to use</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 17：在单独的语句中将 new 的对象放入智能指针</title>
    <link href="https://yngty.github.io/2021/11/08/effecitve-cpp/effective-cpp-17/"/>
    <id>https://yngty.github.io/2021/11/08/effecitve-cpp/effective-cpp-17/</id>
    <published>2021-11-08T01:53:13.000Z</published>
    <updated>2021-11-08T02:11:23.841Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 17: Store newed objects in smart pointers in standalone statements.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;以单独的语句将</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 16：使用同样的形式来new和delete</title>
    <link href="https://yngty.github.io/2021/11/08/effecitve-cpp/effective-cpp-16/"/>
    <id>https://yngty.github.io/2021/11/08/effecitve-cpp/effective-cpp-16/</id>
    <published>2021-11-08T01:23:53.000Z</published>
    <updated>2021-11-08T02:12:52.725Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 16: Use the same form in corresponding uses of new and delete.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;如果你用 &lt;code&gt;new&lt;/code&gt;</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 15：在资源管理类中提供对原始资源的访问</title>
    <link href="https://yngty.github.io/2021/11/05/effecitve-cpp/effective-cpp-15/"/>
    <id>https://yngty.github.io/2021/11/05/effecitve-cpp/effective-cpp-15/</id>
    <published>2021-11-05T07:58:35.000Z</published>
    <updated>2021-11-08T01:19:40.600Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 15: Provide access to raw resources in resource-managing classes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;APIs&lt;/code&gt;</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 14：在资源管理类中小心 copying 行为</title>
    <link href="https://yngty.github.io/2021/11/04/effecitve-cpp/effective-cpp-14/"/>
    <id>https://yngty.github.io/2021/11/04/effecitve-cpp/effective-cpp-14/</id>
    <published>2021-11-04T16:00:01.000Z</published>
    <updated>2021-11-04T16:33:29.494Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 14: Think carefully about copying behavior in resource-managing classes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;设计一个</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 13：以对象管理资源</title>
    <link href="https://yngty.github.io/2021/11/02/effecitve-cpp/effective-cpp-13/"/>
    <id>https://yngty.github.io/2021/11/02/effecitve-cpp/effective-cpp-13/</id>
    <published>2021-11-02T12:30:45.000Z</published>
    <updated>2021-11-02T12:32:55.585Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 13: Use objects to manage</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 12：复制对象时勿忘其每一个成分</title>
    <link href="https://yngty.github.io/2021/11/02/effecitve-cpp/effective-cpp-12/"/>
    <id>https://yngty.github.io/2021/11/02/effecitve-cpp/effective-cpp-12/</id>
    <published>2021-11-02T09:36:33.000Z</published>
    <updated>2021-11-02T09:45:34.385Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 12: Copy all parts of an object&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;正确拷贝函数实现：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 11：赋值运算符需要考虑自我赋值问题</title>
    <link href="https://yngty.github.io/2021/11/01/effecitve-cpp/effective-cpp-11/"/>
    <id>https://yngty.github.io/2021/11/01/effecitve-cpp/effective-cpp-11/</id>
    <published>2021-11-01T05:12:55.000Z</published>
    <updated>2021-11-02T08:59:39.536Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Item 11: Handle assignment to self in</summary>
        
      
    
    
    
    <category term="Effective-C++" scheme="https://yngty.github.io/categories/Effective-C/"/>
    
    
    <category term="C++" scheme="https://yngty.github.io/tags/C/"/>
    
    <category term="Effective-C++" scheme="https://yngty.github.io/tags/Effective-C/"/>
    
  </entry>
  
</feed>
